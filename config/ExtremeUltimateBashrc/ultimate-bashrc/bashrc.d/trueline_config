#!/usr/bin/env bash
# Trueline Custom Configuration
# Link: https://github.com/petobens/trueline
# !!! Requires Nerd Fonts: https://www.nerdfonts.com/
source ${HOME}/trueline_def.sh

# Check to see if we are in a TTY terminal
export _tty_info="$(tty | sed -e 's:/dev/::' 2> /dev/null)"

#############################################################################
# Prompt Configuration for Trueline
#############################################################################

# Several colors here are the primary colors for distro and container logos
# and can be used as a foreground or background color as needed
declare -A TRUELINE_COLORS=(
	[black]='54;54;54'
	[grey]='178;178;178'
	[special_grey]='64;64;64'
	[cursor_grey]='64;64;64'
	[white]='208;208;208'
	[bright_white]='240;240;240'
	[mono]='136;136;136'
	[red]='253;84;84'
	[orange]='230;150;0'
	[yellow]='255;215;0'
	[green]='80;230;70'
	[cyan]='84;255;243'
	[light_blue]='0;120;195'
	[dark_blue]='0;85;150'
	[purple]='198;120;221'
	[pink]='220;32;110'
	[beige]='255;255;204'
	# Distro and container colors
	[linux]='255;204;0'
	[docker]='55;177;217'
	[aws]='255;154;2'
	[alpine]='13;88;127'
	[arch]='25;150;210'
	[artix]='7;161;205'
	[debian]='214;6;80'
	[endeavour]='126;126;255'
	[elementary]='0;163;235'
	[fedora]='80;163;219'
	[freebsd]='242;0;0'
	[gentoo]='151;143;216'
	[guix]='255;196;0'
	[kali]='31;91;141'
	[mageia]='23;100;144'
	[manjaro]='27;186;123'
	[mint]='120;192;48'
	[nixos]='126;183;225'
	[openbsd]='251;237;139'
	[pop_os]='65;185;199'
	[raspberry_pi]='237;32;127'
	[redhat]='238;36;52'
	[rocky]='16;185;130'
	[slackware]='73;98;174'
	[solus]='82;148;226'
	[suse]='121;191;66'
	[ubuntu]='240;115;30'
	[void]='172;195;173'
	[zorin]='0;170;255'
	[windows]='0;173;239'
	[android]='114;179;1'
)

# Prompt segments and order if we are in an SSH session or a container...
if [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
	declare -a TRUELINE_SEGMENTS=(
		'icon,bright_white,special_grey,bold'
		'user,white,dark_blue,normal'
#		'time,bright_white,dark_blue,normal'
		'aws_profile,black,orange,bold'
		'venv,black,purple,bold'
		'conda_env,black,purple,bold'
		'git,bright_white,pink,normal'
		'working_dir,bright_white,light_blue,normal'
		'read_only,black,orange,bold'
		'bg_jobs,black,orange,bold'
		'exit_status,bright_white,red,bold'
#		'cmd_duration,black,grey,normal'
		'cmd_duration_modified,black,grey,normal'
#		'newline,green,black,bold'
	)

elif [[ -f /.dockerenv ]] || [[ -f /run/.containerenv ]]; then
	declare -a TRUELINE_SEGMENTS=(
		'icon,bright_white,special_grey,bold'
		'container,white,dark_blue,normal'
#		'time,bright_white,dark_blue,normal'
		'aws_profile,black,orange,bold'
		'venv,black,purple,bold'
		'conda_env,black,purple,bold'
		'git,bright_white,pink,normal'
		'working_dir,bright_white,light_blue,normal'
		'read_only,black,orange,bold'
		'bg_jobs,black,orange,bold'
		'exit_status,bright_white,red,bold'
#		'cmd_duration,black,grey,normal'
		'cmd_duration_modified,black,grey,normal'
#		'newline,green,black,bold'
	)

# Prompt segments and order if we are logged in as root...
elif [[ $EUID -eq 0 ]]; then
	declare -a TRUELINE_SEGMENTS=(
		'icon,red,bright_white,bold'
		'user,bright_white,red,bold'
#		'time,bright_white,dark_blue,normal'
		'aws_profile,black,orange,bold'
		'venv,black,purple,bold'
		'conda_env,black,purple,bold'
		'git,bright_white,pink,normal'
		'working_dir,bright_white,light_blue,normal'
		'read_only,black,orange,bold'
		'bg_jobs,black,orange,bold'
		'exit_status,bright_white,red,bold'
#		'cmd_duration,black,grey,normal'
		'cmd_duration_modified,black,grey,normal'
#		'newline,bright_white,red,bold'
	)

# Prompt segments and order if this is the local machine and not root...
else
	declare -a TRUELINE_SEGMENTS=(
		'icon,bright_white,special_grey,bold'
#		'user,white,dark_blue,normal'
#		'time,bright_white,dark_blue,normal'
		'aws_profile,black,orange,bold'
		'venv,black,purple,bold'
		'conda_env,black,purple,bold'
		'git,beige,dark_blue,normal'
		'working_dir,bright_white,light_blue,normal'
		'read_only,black,orange,bold'
		'bg_jobs,black,orange,bold'
		'exit_status,bright_white,red,bold'
#		'cmd_duration,black,grey,normal'
		'cmd_duration_modified,black,grey,normal'
#		'newline,green,black,bold'
	)
fi

#############################################################################
# Custom symbols that can be used with Trueline prompt
#############################################################################

# If we are in a TTY terminal, then unicode probably won't work
if [[ "${_tty_info}" =~ ^tty.* ]]; then

	# If Unicode is not supported:
	declare -A TRUELINE_SYMBOLS=(
		[aws_profile]=''
		[bg_jobs]=''
		[clock]=''
		[exit_status]=''
		[git_ahead]='^'
		[git_github]=''
		[git_behind]='V'
		[git_bitbucket]=''
		[git_branch]=''
		[git_gitlab]=''
		[git_modified]='+'
		[newline]=' $ '
		[newline_root]=' # '
		[ps2]='...'
		[read_only]='X'
		[ssh]=''
		[timer]=''
		[venv]=''
		[vimode_cmd]='N'
		[vimode_ins]='I'
		[working_dir_folder]='...'
		[working_dir_home]='~'
		[working_dir_separator]='/'
	)

else # We are not in a TTY terminal so use Unicode

	# Some of these require nerd fonts -> nerdfonts.com
	declare -A TRUELINE_SYMBOLS=(
		#[aws_profile]=''
		#[bg_jobs]=''
		[clock]='🕒 '
		#[exit_status]=''
		#[git_ahead]=''
		#[git_github]=''
		[git_github]=''
		#[git_github]=''
		#[git_github]=''
		#[git_github]=''
		#[git_behind]=''
		#[git_bitbucket]=''
		[git_bitbucket]=''
		#[git_branch]=''
		#[git_gitlab]=''
		#[git_modified]=''
		#[newline]='  '
		#[newline]=' 👤'
		#[newline]=' 💻'
		#[newline]=' 👨 '
		#[newline]=' ❯ '
		[newline]='  '
		#[newline]=' ❯'
		#[newline]='  '
		#[newline]=' ⮞ '
		#[newline]=' 🠊 '
		#[newline]=' ->' # Intended for ligatures
		#[newline_root]='  '
		[newline_root]='  '
		#[newline_root]=' ~>' # Intended for ligatures
		#[ps2]='...'
		#[read_only]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[segment_separator]=''
		#[ssh]='󰌘'
		[timer]='󰔟 '
		#[timer]='祥 '
		#[timer]=' '
		#[venv]=''
		#[vimode_cmd]='N'
		#[vimode_ins]='I'
		#[working_dir_folder]=''
		#[working_dir_home]=''
		#[working_dir_home]=''
		#[working_dir_home]='󰋞'
		#[working_dir_home]='󰠧'
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]='⮕'
		#[working_dir_separator]='→'
		#[working_dir_separator]='🡺'
		#[working_dir_separator]='⇒'
		#[working_dir_separator]='⟹'
		#[working_dir_separator]='⇝'
		#[working_dir_separator]='⤳'
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]=''
		#[working_dir_separator]='·'
	)
fi

# Settings
export TRUELINE_GIT_SHOW_STATUS_NUMBERS=false
export TRUELINE_GIT_MODIFIED_COLOR='yellow'
export TRUELINE_GIT_BEHIND_AHEAD_COLOR='cyan'
export TRUELINE_USER_ROOT_COLORS=('white' 'red')
export TRUELINE_WORKING_DIR_SPACE_BETWEEN_PATH_SEPARATOR=true
export TRUELINE_WORKING_DIR_ABBREVIATE_PARENT_DIRS=false
export TRUELINE_WORKING_DIR_ABBREVIATE_PARENT_DIRS_LENGTH=3
export TRUELINE_USER_SHOW_IP_SSH=false
export TRUELINE_USER_ALWAYS_SHOW_HOSTNAME=false
export TRUELINE_USER_SHORTEN_HOSTNAME=false

# ======================== CUSTOM SEGMENTS ==================================

#############################################################################
# Custom Trueline time segment
#############################################################################
function _trueline_time_segment() {
	# local prompt_time="🕒 \D{%b %e %-l:%M.%S %p}"  # Long 12-Hour
	# local prompt_time="🕒 \D{%b %e %-k:%M.%S}"  # Long 24-Hour
	local prompt_time="\D{%-l:%M}"  # Short 12-Hour
	# local prompt_time="\D{%-k:%M}"  # Short 24-Hour
	local fg_color="$1"
	local bg_color="$2"
	local font_style="$3"
	local segment="$(_trueline_separator)"
	segment+="$(_trueline_content "$fg_color" "$bg_color" "$font_style" " ${TRUELINE_SYMBOLS[clock]}$prompt_time ")"
	PS1+="$segment"
	_trueline_record_colors "$fg_color" "$bg_color" "$font_style"
}

#############################################################################
# Custom Trueline container segment
#############################################################################
function _trueline_container_segment() {
	local fg_color="$1"
	local bg_color="$2"
	local font_style="$3"
	local segment="$(_trueline_separator)"
	segment+="$(_trueline_content "$fg_color" "$bg_color" "$font_style" "  ${HOSTNAME%%.*} ")"
	PS1+="$segment"
	_trueline_record_colors "$fg_color" "$bg_color" "$font_style"
}

#############################################################################
# Show custom icon for the current distro or container
# Find more icons here: https://www.nerdfonts.com/cheat-sheet
#############################################################################
function _trueline_icon_segment() {
	# Manual icon override
	# (uncomment the icon you wish to use)
	local prompt_icon=""
	#local prompt_icon="" # Linux
	#local prompt_icon="" # Bash
	#local prompt_icon="" # Terminal
	#local prompt_icon="" # Prompt
	#local prompt_icon="" # Desktop
	#local prompt_icon="" # Server
	#local prompt_icon="󰣳" # NAS
	#local prompt_icon="" # Media TV
	#local prompt_icon="󰒍" # Network
	#local prompt_icon="󰌘" # SSH
	#local prompt_icon="" # User
	#local prompt_icon="" # Secure
	#local prompt_icon="" # Cloud
	#local prompt_icon="󰖩" # Wifi
	#local prompt_icon="" # VM
	#local prompt_icon="" # Container
	#local prompt_icon="" # Docker
	#local prompt_icon="" # AWS
	#local prompt_icon="" # Mobile

	# If we are in a TTY terminal, then unicode probably won't work
	# so instead, give helpful information for which TTY we are in
	#local _tty_info="$(tty | sed -e 's:/dev/::' 2> /dev/null)"
	if [[ "${_tty_info}" =~ ^tty.* ]]; then
		local prompt_icon="${_tty_info}"
		local fg_color="green"
		local bg_color="black"
		local font_style="$3"

	# We are logged in as root...
	elif [[ $EUID -eq 0 ]]; then
		local prompt_icon=""
		local fg_color="$1"
		local bg_color="$2"
		local font_style="$3"

	# Otherwise, detect the distribution
	elif [[ -z "$prompt_icon" ]]; then
		local distro="$(distro)"
		case ${distro:-$(uname -srm)} in
			([Aa]lpine*)
				local prompt_icon=''
				local fg_color='alpine'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Aa]ndroid*)
				local prompt_icon=''
				local fg_color='bright_white'
				local bg_color='android'
				local font_style='normal'
			;;

			([Aa]rch*)
				local prompt_icon=''
				local fg_color='arch'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Aa]rco*)
				local prompt_icon=''
				local fg_color='arch'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Aa]rtix*)
				local prompt_icon=''
				local fg_color='artix'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Cc]ent[Oo][Ss]*)
				local prompt_icon=''
				local fg_color='bright_white'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Dd]ebian*)
				local prompt_icon=''
				local fg_color='debian'
				local bg_color='bright_white'
				local font_style='bold'
			;;

			([Ee]lementary*)
				local prompt_icon=''
				local fg_color='elementary'
				local bg_color='bright_white'
				local font_style='bold'
			;;

			([Ee]ndeavour*)
				local prompt_icon=''
				local fg_color='endeavour'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Ff]edora*)
				local prompt_icon=''
				local fg_color='fedora'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Ff]ree[Bb][Ss][Dd]*)
				local prompt_icon=''
				local fg_color='freebsd'
				local bg_color='white'
				local font_style='normal'
			;;

			([Gg]entoo*)
				local prompt_icon=''
				local fg_color='gentoo'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Gg][Nn][Uu]*)
				local prompt_icon=''
				local fg_color='guix'
				local bg_color='special_grey'
				local font_style='bold'
			;;

			([Gg]uix[Ss][Dd]*|[Gg]uix*)
				local prompt_icon=''
				local fg_color='guix'
				local bg_color='special_grey'
				local font_style='bold'
			;;

			([Hh]aiku*)
				local prompt_icon=''
				local fg_color='green'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Kk][Aa][Ll][Ii]*)
				local prompt_icon=''
				local fg_color='kali'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Kk][Dd][Ee]*[Nn]eon*)
				local prompt_icon=''
				local fg_color='ubuntu'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Ll]inux*[Mm]int*|[Mm]int)
				local prompt_icon=''
				local fg_color='mint'
				local bg_color='bright_white'
				local font_style='bold'
			;;


			([Ll]inux*)
				local prompt_icon=''
				local fg_color='black'
				local bg_color='linux'
				local font_style='normal'
			;;

			([Mm]ac[Oo][Ss]*|[Dd]arwin*)
				local prompt_icon=''
				local fg_color='special_grey'
				local bg_color='white'
				local font_style='normal'
			;;

			([Mm]ageia*)
				local prompt_icon=''
				local fg_color='bright_white'
				local bg_color='mageia'
				local font_style='normal'
			;;

			([Mm]anjaro*)
				local prompt_icon=''
				local fg_color='manjaro'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Mm][Xx]*)
				local prompt_icon=''
				local fg_color='bright_white'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Nn]et[Bb][Ss][Dd]*)
				local prompt_icon=''
				local fg_color='freebsd'
				local bg_color='white'
				local font_style='normal'
			;;

			([Nn]ix[Oo][Ss]*)
				local prompt_icon=''
				local fg_color='nixos'
				local bg_color='bright_white'
				local font_style='bold'
			;;

			([Oo]pen[Bb][Ss][Dd]*)
				local prompt_icon=''
				local fg_color='openbsd'
				local bg_color='special_grey'
				local font_style='bold'
			;;

			([Oo]pen[Ss][Uu][Ss][Ee]*[Tt]umbleweed*)
				local prompt_icon=''
				local fg_color='suse'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Oo]pen[Ss][Uu][Ss][Ee]*|[Oo]pen*SUSE*|SUSE*|suse*)
				local prompt_icon=''
				local fg_color='suse'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Oo]pen[Ww]rt*)
				local prompt_icon='󰖩'
				local fg_color='blue'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Pp]op!_[Oo][Ss]*)
				local prompt_icon=''
				local fg_color='pop_os'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Rr]ed*[Hh]at*)
				local prompt_icon=''
				local fg_color='bright_white'
				local bg_color='redhat'
				local font_style='bold'
			;;

			([Rr]ocky*)
				local prompt_icon=''
				local fg_color='rocky'
				local bg_color='bright_white'
				local font_style='bold'
			;;

			([Rr]aspbian*)
				local prompt_icon=''
				local fg_color='raspberry_pi'
				local bg_color='bright_white'
				local font_style='bold'
			;;

			([Ss]lackware*)
				local prompt_icon=''
				local fg_color='slackware'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Ss]olus*)
				local prompt_icon=''
				local fg_color='solus'
				local bg_color='bright_white'
				local font_style='normal'
			;;

			([Uu]buntu*)
				local prompt_icon=''
				local fg_color='ubuntu'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Vv]oid*)
				local prompt_icon=''
				local fg_color='void'
				local bg_color='special_grey'
				local font_style='normal'
			;;

			([Zz]orin*)
				local prompt_icon=''
				local fg_color='zorin'
				local bg_color='bright_white'
				local font_style='bold'
			;;

			(*)
				local prompt_icon=''
				local fg_color='black'
				local bg_color='linux'
				local font_style='normal'
			;;
		esac
	else
		local fg_color="$1"
		local bg_color="$2"
		local font_style="$3"
	fi

	local segment="$(_trueline_separator)$(_trueline_content "$fg_color" "$bg_color" "$font_style" " $prompt_icon ")"
	PS1+="$segment"
	_trueline_record_colors "$fg_color" "$bg_color" "$font_style"
}

#############################################################################
# Custom modification of the duration segment that shows how long a command took
# This modification filters out the timer on standard commands that might take
# 1 or 2 seconds, and only show the timer when commands take longer than this
# since this script timer is not going to be 100% accurate to the second anyway
# - normally I only want to see the timer if a command is taking longer than
# usual or if it's a longer running process that takes more than a few seconds
#############################################################################
_trueline_cmd_duration_modified_segment() {

	function _trueline_format_time {
		local T=$1
		local D=$((T / 60 / 60 / 24))
		local H=$((T / 60 / 60 % 24))
		local M=$((T / 60 % 60))
		local S=$((T % 60))
		local result=""

		((D > 0)) && result="${D}d "
		((H > 0)) && result="${result}${H}h "
		((M > 0)) && result="${result}${M}m "
		((S > 0)) && result="${result}${S}s "
		echo -e "${result}" | sed -e 's/[[:space:]]*$//'
	}

	function _trueline_timestamp_cleanup() {
		command rm -f "$TRUELINE_TIMESTAMP_FILE" 2> /dev/null
	}

	trap _trueline_timestamp_cleanup EXIT

	# PS0 gets expanded after a command is read (just before execution)
	TRUELINE_TIMESTAMP_FILE="/tmp/trueline.user-${USER}.pid-$$.timestamp"
	# shellcheck disable=SC2034,SC2016
	PS0='$(date +%s > "$TRUELINE_TIMESTAMP_FILE")'

	local duration=0
	if [ -e "$TRUELINE_TIMESTAMP_FILE" ]; then
		local end=$(date +%s)
		local start=$(cat "$TRUELINE_TIMESTAMP_FILE")
		duration="$((end - start))"
		_trueline_timestamp_cleanup
	fi

	# =========================================================================
	# This next line of code is the only modification to the original function!
	# Don't show the duration second for anything less than a couple of seconds
	# to help filter this segment out on super basic commands like ls and cd
	# =========================================================================
	if ((duration > 1)); then
		local fg_color="$1"
		local bg_color="$2"
		local font_style="$3"
		local segment="$(_trueline_separator)"
		local elapsed="$(_trueline_format_time duration)"
		segment+="$(_trueline_content "$fg_color" "$bg_color" "$font_style" " ${TRUELINE_SYMBOLS[timer]}$elapsed ")"
		PS1+="$segment"
		_trueline_record_colors "$fg_color" "$bg_color" "$font_style"
	fi
}

#############################################################################
# Get the name of the current distro
# This function is blantely ripped from pfetch https://github.com/dylanaraps/pfetch
#############################################################################
function distro() {
	local os="$(uname -srm)"
	local distro="Unknown"
	case "$os" in
		(Linux*)
			# Some Linux distributions (which are based on others)
			# fail to identify as they **do not** change the upstream
			# distribution's identification packages or files.
			#
			# It is senseless to add a special case in the code for
			# each and every distribution (which _is_ technically no
			# different from what it is based on) as they're either too
			# lazy to modify upstream's identification files or they
			# don't have the know-how (or means) to ship their own
			# lsb-release package.
			#
			# This causes users to think there's a bug in system detection
			# tools like neofetch or pfetch when they technically *do*
			# function correctly.
			#
			# Exceptions are made for distributions which are independent,
			# not based on another distribution or follow different
			# standards.
			#
			# This applies only to distributions which follow the standard
			# by shipping unmodified identification files and packages
			# from their respective upstreams.
			if [ -x "$(command -v lsb_release)" ]; then
				distro=$(lsb_release -sd)

			# Android detection works by checking for the existence of
			# the follow two directories. I don't think there's a simpler
			# method than this.
			elif [ -d /system/app ] && [ -d /system/priv-app ]; then
				distro="Android $(getprop ro.build.version.release)"

			else
				# This used to be a simple '. /etc/os-release' but I believe
				# this is insecure as we blindly executed whatever was in the
				# file. This parser instead simply handles 'key=val', treating
				# the file contents as plain-text.
				while IFS='=' read -r key val; do
					case $key in
						(PRETTY_NAME)
							distro=$val
						;;
					esac
				done < /etc/os-release
			fi

			# 'os-release' and 'lsb_release' sometimes add quotes
			# around the distribution name, strip them.
			distro=${distro##[\"\']}
			distro=${distro%%[\"\']}

			# Special cases for (independent) distributions which
			# don't follow any os-release/lsb standards whatsoever.
			[ -x "$(command -v crux)" ] && distro=$(crux)
			[ -x "$(command -v guix)" ] && distro='Guix System'

			# Check to see if we're running Bedrock Linux which is
			# very unique. This simply checks to see if the user's
			# PATH contains a Bedrock specific value.
			case $PATH in
				(*/bedrock/cross/*)
					distro='Bedrock Linux'
				;;
			esac

			# Check to see if Linux is running in Windows 10 under
			# WSL1 (Windows subsystem for Linux [version 1]) and
			# append a string accordingly.
			#
			# If the kernel version string ends in "-Microsoft",
			# we're very likely running under Windows 10 in WSL1.
			if [ "$WSLENV" ]; then
				distro="${distro}${WSLENV+ on Windows 10 [WSL2]}"
			fi
		;;

		(Darwin*)
			# Parse the SystemVersion.plist file to grab the macOS
			# version. The file is in the following format:
			#
			# <key>ProductVersion</key>
			# <string>10.14.6</string>
			#
			# 'IFS' is set to '<>' to enable splitting between the
			# keys and a second 'read' is used to operate on the
			# next line directly after a match.
			#
			# '_' is used to nullify a field. '_ _ line _' basically
			# says "populate $line with the third field's contents".
			while IFS='<>' read -r _ _ line _; do
				case $line in
					# Match 'ProductVersion' and read the next line
					# directly as it contains the key's value.
					ProductVersion)
						IFS='<>' read -r _ _ mac_version _
						continue
					;;

					ProductName)
						IFS='<>' read -r _ _ mac_product _
						continue
					;;
				esac
			done < /System/Library/CoreServices/SystemVersion.plist

			# Use the ProductVersion to determine which macOS/OS X codename
			# the system has. As far as I'm aware there's no "dynamic" way
			# of grabbing this information.
			case $mac_version in
				(10.4*)  distro='Mac OS X Tiger' ;;
				(10.5*)  distro='Mac OS X Leopard' ;;
				(10.6*)  distro='Mac OS X Snow Leopard' ;;
				(10.7*)  distro='Mac OS X Lion' ;;
				(10.8*)  distro='OS X Mountain Lion' ;;
				(10.9*)  distro='OS X Mavericks' ;;
				(10.10*) distro='OS X Yosemite' ;;
				(10.11*) distro='OS X El Capitan' ;;
				(10.12*) distro='macOS Sierra' ;;
				(10.13*) distro='macOS High Sierra' ;;
				(10.14*) distro='macOS Mojave' ;;
				(10.15*) distro='macOS Catalina' ;;
				(11*)    distro='macOS Big Sur' ;;
				(*)      distro='macOS' ;;
			esac

			# Use the ProductName to determine if we're running in iOS.
			case $mac_product in
				(iP*) distro='iOS' ;;
			esac

			distro="$distro $mac_version"
		;;

		(Haiku)
			# Haiku uses 'uname -v' for version information
			# instead of 'uname -r' which only prints '1'.
			distro=$(uname -sv)
		;;

		(Minix|DragonFly)
			distro="$os $kernel"

			# Minix and DragonFly don't support the escape
			# sequences used, clear the exit trap.
			trap '' EXIT
		;;

		(SunOS)
			# Grab the first line of the '/etc/release' file
			# discarding everything after '('.
			IFS='(' read -r distro _ < /etc/release
		;;

		(OpenBSD*)
			# Show the OpenBSD version type (current if present).
			# kern.version=OpenBSD 6.6-current (GENERIC.MP) ...
			IFS=' =' read -r _ distro openbsd_ver _ <<-EOF
				$(sysctl kern.version)
			EOF

			distro="$distro $openbsd_ver"
		;;

		FreeBSD)
			distro="$os $(freebsd-version)"
		;;

		(*)
			# Catch all to ensure '$distro' is never blank.
			# This also handles the BSDs.
			distro="$os $kernel"
		;;
	esac

	echo -n "$distro"
}
