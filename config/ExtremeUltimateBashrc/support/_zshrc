#!/bin/zsh

### TEST FOR AN INTERACTIVE SHELL
# This file is sourced by all "interactive" bash shells on startup
# including shells such as scp and rcp that can't tolerate any output.
# There is no need to set anything past this point for scp and rcp,
# and it's important to refrain from outputting anything in those cases.
[[ $- != *i* ]] && return
[[ -z "$PS1" ]] && return

# Security for X apps
if [[ -x "$(command -v xhost)" ]]; then
	xhost +local:root > /dev/null 2>&1
fi

#######################################################
# Set the default editor
# Examples: vim, nvim, emacs, nano, micro, pico,
# or gui apps like kate, gedit, notepadqq, or vscodium
# NOTE: In Git Bash, you can use something like "/c/Program\ Files/Notepad++/notepad++.exe"
#######################################################

export EDITOR=nano visudo
export VISUAL=nano visudo
export SUDO_EDITOR=nano
export FCEDIT=nano

# We will default to use either Neovim https://neovim.io or vim instead of vi
# NOTE: vi is POSIX compliant but vim has more features and Neovim is more extensible
# http://www.viemu.com/a-why-vi-vim.html
# https://www.linuxfordevices.com/tutorials/linux/vim-vs-neovim
if [[ -x "$(command -v nvim)" ]]; then
	alias vi='nvim'
	alias vim='nvim'
	alias svi='sudo nvim'
	alias vis='nvim "+set si"'
elif [[ -x "$(command -v vim)" ]]; then
	alias vi='vim'
	alias svi='sudo vim'
	alias vis='vim "+set si"'
fi

# Set some defaults for nano
# NOTE: Depending on the version of nano you have, --linenumbers and --suspend is helpful
alias nano='nano --smarthome --multibuffer --const --autoindent'

# Set Micro true color support
# Link: https://micro-editor.github.io/
# Install: curl https://getmic.ro | bash
export MICRO_TRUECOLOR=1

#######################################################
# Set default variable values
# These variables can be overridden in one of these environment variable files:
# ~/.env
# ~/.envrc
# ~/.config/bashrc/config
#######################################################

# Show an installed information HUD on initial Bash load (if not skipped)
# Link: https://github.com/LinusDierheimer/fastfetch
# Link: https://ostechnix.com/neofetch-display-linux-systems-information/
# Link: https://github.com/KittyKatt/screenFetch
# Link: https://github.com/deater/linux_logo
# Link: https://github.com/dylanaraps/pfetch
_SKIP_SYSTEM_INFO=false

# If not skipped, shows pending updates (only in Arch, Manjaro, and Ubuntu)
# WARNING: This updates check takes several seconds so the default is to skip
_SKIP_UPGRADE_NOTIFY=true

# Automatically launch TMUX terminal multiplexer in local, TTY, or SSH sessions
# https://github.com/tmux/tmux/wiki
# Since TMUX is pre-installed on so many systems, the default is to skip TMUX
_TMUX_LOAD_TTY=false
_TMUX_LOAD_SSH=false
_TMUX_LOAD_LOCAL=false

# OPTIONAL: Set and force the default TMUX session name for this script and tm
# If not specified, an active TMUX session is used and attached to
# If no active TMUX session exists, the current logged in user name is used
#_TMUX_LOAD_SESSION_NAME=""

# Terminology is a graphical EFL terminal emulator that can run in TTY sessions
# If installed, it can automatically be launched when starting a TTY session
# To split the window horizontally press Ctrl+Shift+PgUp
# To split the window vertically press Ctrl+Shift+PgDn
# To create Tabs press Ctrl+Shift+T and cycle through using Ctrl+1-9
# Link: https://github.com/borisfaure/terminology
# Link: https://linoxide.com/terminology-terminal/
_SKIP_TERMINOLOGY_TTY=false

# Make sure the default file and directory permissions for newly created files
# in the home directory is umask 026 to improve security.
# (user=read/write/execute, group=read/execute, others=execute for directories)
# The default is to skip this security setting and not modify home permissions
_SKIP_UMASK_HOME=true

# Replaces Sudo with one of the two alternatives (if installed):
# RootDO (rdo) - A very slim alternative to both sudo and doas
# Link: https://codeberg.org/sw1tchbl4d3/rdo
# - OR -
# A port of OpenBSD's doas offers two benefits over sudo:
# 1) Its configuration file has a simple syntax and
# 2) It is smaller, requiring less effort to audit the code
# Link: https://github.com/Duncaen/OpenDoas or https://github.com/slicer69/doas
# Default value is skip and must be set to false manually for security reasons
_SKIP_SUDO_ALTERNATIVE=true

# If set to true, cd will not output the current absolute path under certain
# circumstances like when using the command cd - or using cdable_vars bookmarks
# Link: https://www.gnu.org/software/bash/manual/bash.html#index-cd
_SILENCE_CD_OUTPUT=false

# If set to true, will not load anything that modifies the ls command or colors
_SKIP_LS_COLORIZED=false

# exa is a modern color replacement for ls that also has some Git support
# Link: https://github.com/ogham/exa
_SKIP_EXA=false

# grc Generic Colouriser
# Link: https://github.com/garabik/grc
_SKIP_GRC=false

# Determine our kernel name
_KERNEL_NAME="$(expr substr $(uname -s) 1 5)"

#######################################################
# User Specific Environment Variables
#######################################################

if [[ -f "$HOME/.envrc" ]]; then
	source "$HOME/.envrc"
fi

if [[ -f "$HOME/.env" ]]; then
	source "$HOME/.env"
fi

if [[ -f "$HOME/.config/bashrc/config" ]]; then
	source "$HOME/.config/bashrc/config"
fi

# If the GOPATH environment variable is not set, set it to the default
if [[ -x "$(command -v go)" ]] && [[ -z ${GOPATH+x} ]] && [[ -d $HOME/go ]]; then
	export GOPATH="$HOME/go"
fi

#######################################################
# WARNING: The _SKIP_TMUX setting is depreciated
# Please use _TMUX_LOAD_TTY, _TMUX_LOAD_SSH, and _TMUX_LOAD_LOCAL instead
# For compatibility with older settings only
#######################################################

if [[ $_SKIP_TMUX = false ]]; then
	_TMUX_LOAD_TTY=true
	_TMUX_LOAD_SSH=true
	_TMUX_LOAD_LOCAL=false
fi

#######################################################
# Change the default file and directory permissions for newly created files
# in the home directory
# The default is usually 022 blocking writes for non-users
# umask 022 # u=rwx,g=rx,o=rx
#######################################################

# Only if we are not the root user...
if [[ $_SKIP_UMASK_HOME = false ]] && [[ $EUID -ne 0 ]]; then
	# Grant full access to the user, block write for group, and
	# block read write for others. Leave execute for directories.
	# (Also see fixuserhome function)
	umask u=rwx,g=rx,o=x # umask 026
fi

#######################################################
# Git Aliases
#######################################################

if [[ -x "$(command -v git)" ]]; then

	# Git Alias: Provides many useful Git alias commands
	# This alias will install/update the Git alias commands file
	# Link: https://github.com/GitAlias/gitalias
	# Edit ~/.gitconfig and then include the path to this file like this:
	# [include]
	# path = gitalias.txt
	alias gitalias='curl -L --output "$HOME/gitalias.txt" https://raw.githubusercontent.com/GitAlias/gitalias/master/gitalias.txt && git config --global include.path "gitalias.txt"'

	# When invoked without arguments gg will do a short Git status,
	# otherwise it will just pass on the given arguments to the Git command.
	# Status is likely to be the Git command one will execute the most,
	# hence this simple enhancement does prove very useful in practice.
	alias gg='_f() { if [[ $# == 0 ]]; then git status --short --branch; else git "$@"; fi }; _f'

	# All Git aliases start with gg for speed
	alias ggg='git status'
	alias ggp='git pull' # Fetch and merge
	alias ggf='git fetch'
	alias ggm='git merge'
	alias ggpu='git push'
	alias ggr='git reset' # Specify a file to un-add or no file to unstage all
	alias gga='git add'
	alias ggap='git add -p' # Interactively choose hunks
	alias ggac='git add --all && git commit --verbose -m' # Add "commit message"
	alias ggc='git commit --verbose -m' # Add "commit message"
	alias ggm='git commit --amend --verbose'
	alias ggl='git log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short'
	alias ggd='git diff'
	alias ggds='git diff --stat'
	alias ggdc='git diff --cached'
	alias ggb='git checkout' # Checkout a branch
	alias ggcb='git checkout -b' # Create new branch
	alias ggst='git stash'
	alias ggpop='git stash pop'

	# Find all Git repos in the current directory recursively
	# Note: Excludes hidden and temp directories
	# You can find all git repos on the entire system using: locate .git | grep "/.git$"
	alias gitrepos="find . -type d -not -path '*/.git/*' -not -path '*/tmp/*' -not -path '*/temp/*' -not -path '*/.*' -exec test -e '{}/.git' ';' -print -prune"

	# Nearly everything you can do in Git but in a terminal UI
	# Link: https://github.com/Extrawurst/gitui
	if [[ -x "$(command -v gitui)" ]]; then
		alias ggu='gitui'
	fi

	# Tig ncurses-based text-mode interface for git
	# Link: https://jonas.github.io/tig/
	if [[ -x "$(command -v tig)" ]]; then
		alias gitt='tig'
	fi

	# Git Commander
	# Link: https://github.com/golbin/git-commander
	# Install: npm install -g git-commander
	if [[ -x "$(command -v git-commander)" ]]; then
		alias gitc='git-commander'
	fi

	# GRV - Git Repository Viewer
	# Link: https://github.com/rgburke/grv
	if [[ -x "$(command -v grv)" ]]; then
		alias gitrv='grv'
	fi

	# LazyGit - Terminal UI for git commands
	# Link: https://github.com/jesseduffield/lazygit
	if [[ -x "$(command -v lazygit)" ]]; then
		alias lg='lazygit'
	fi

	# Ugit - Git Undo
	# Link: https://github.com/Bhupesh-V/ugit
	# Install: sh -c "$(curl -fsSL https://raw.githubusercontent.com/Bhupesh-V/ugit/master/install)"
	if [[ -x "$(command -v ugit)" ]]; then
		alias gitundo='ugit'
	fi

	# List Git files by last modified date
	# Link: https://stackoverflow.com/questions/14141344/git-status-list-last-modified-date
	alias gitmodifieddate='IFS=""; git status -s | while read -n2 mode; read -n1; read file; do echo $mode $(stat -c %y "$file") $file; done | sort -k1,4'

	# Returns you to the Git project's top level
	alias cg='cd `git rev-parse --show-toplevel`'

	# Using the Git status short format information, here's a function that
	# uses Awk and the column command to give you customized status output
	# Link: https://stackoverflow.com/questions/8727003/enhanced-ls-with-git-status-information
	function gitls {
		git status --porcelain | \
			awk 'BEGIN {FS=" "}
			{
				xstat = substr($0, 1, 1);
				ystat = substr($0, 2, 1);
				f = substr($0, 4);
				ri = index(f, " -> ");
				if (ri > 0) f = substr(f, 1, ri);
				if (xstat == " " && ystat ~ "M|D") stat = "not_updated";
				else if (xstat == "M" && ystat ~ " |M|D") stat = "updated_in_index";
				else if (xstat == "A" && ystat ~ " |M|D") stat = "added_to_index";
				else if (xstat == "D" && ystat ~ " |M") stat = "deleted_from_index";
				else if (xstat == "R" && ystat ~ " |M|D") stat = "renamed_in_index";
				else if (xstat == "C" && ystat ~ " |M|D") stat = "copied_in_index";
				else if (xstat ~ "M|A|R|C" && ystat == " ") stat = "index_and_work_tree_matches";
				else if (xstat ~ " |M|A|R|C" && ystat == "M") stat = "work_tree_changed_since_index";
				else if (xstat ~ " |M|A|R|C" && ystat == "D") stat = "deleted_in_work_tree";
				else if (xstat == "D" && ystat == "D") stat = "unmerged,both_deleted";
				else if (xstat == "A" && ystat == "U") stat = "unmerged,added_by_us";
				else if (xstat == "U" && ystat == "D") stat = "unmerged,deleted_by_them";
				else if (xstat == "U" && ystat == "A") stat = "unmerged,added_by_them";
				else if (xstat == "D" && ystat == "U") stat = "unmerged,deleted_by_us";
				else if (xstat == "A" && ystat == "A") stat = "unmerged,both_added";
				else if (xstat == "U" && ystat == "U") stat = "unmerged,both_modified";
				else if (xstat == "?" && ystat == "?") stat = "untracked";
				else if (xstat == "!" && ystat == "!") stat = "ignored";
				else stat = "unknown_status";
				print f "   " stat;
			}' | \
			column -t -s "  " | "$PAGER"
	}

	# Forces Git to overwrite local files and resets the branch (or master)
	# Important: If you have any local changes, they will be lost (if they're tracked)!
	function gitresetbranch() {
		local branch="${@}"
		if [ -z "${branch}" ]; then
			read -r -p "No branch was specified. Do you wish to use master? [y/N] " response
			case "$response" in
				[yY][eE][sS]|[yY])
					local branch="master"
					;;
				*)
					echo "Please specify a branch."
					return 1
					;;
			esac
		fi
		read -r -p "WARNING: If you have any local changes, they will be lost! Are you sure? [y/N] " response
		case "$response" in
			[yY][eE][sS]|[yY])
				echo git checkout ${branch} && git fetch --all && git reset --hard origin/${branch}
				;;
			*)
				return 0
				;;
		esac
	}

	# Set defaults for Git (~/.gitconfig)
	function gitfixsettings() {
		# If GitAlias (see gitalias alias) is installed...
		if [[ -f "$HOME/gitalias.txt" ]]; then
			# Tell Git to include this file
			git config --global include.path "gitalias.txt"
		fi

		# Set the user name
		local GIT_USER_NAME
		read -e -i "$(git config --get user.name)" -p "Enter your user name (ENTER to skip): " GIT_USER_NAME
		if [ -z "${GIT_USER_NAME}" ]; then
			GIT_USER_NAME="User"
		fi
		git config --global user.name "${GIT_USER_NAME}"

		# Set the email address
		local GIT_USER_EMAIL
		read -e -i "$(git config --get user.email)" -p "Enter your email (ENTER to skip): " GIT_USER_EMAIL
		if [ -z "${GIT_USER_EMAIL}" ]; then
			GIT_USER_EMAIL="user@example.com"
		fi
		git config --global user.email "${GIT_USER_EMAIL}"

		# You should add this manually with your own information
		# git config --global user.signingkey <gpg-key-id>

		# Set the default Git editor to your default Bash editor
		git config --global core.editor "${EDITOR}"

		# Set the dafault pager
		git config --global core.pager "less --ignore-case --LONG-PROMPT --LINE-NUMBERS"

		# Set defaults for diff and merge
		git config --global merge.conflictstyle "diff3"
		git config --global diff.colorMoved "default"

		# Set this if icdiff is installed
		if [[ -x "$(command -v icdiff)" ]]; then
			git config --global icdiff.options '--highlight --line-numbers --strip-trailing-cr'
		fi

		# If delta is installed...
		if [[ -x "$(command -v delta)" ]]; then
			# delta - Beautiful side by side colored diff with Git support and syntax highlighting
			# Link: https://github.com/dandavison/delta
			# Info: Add listed settings to your ~/.gitconfig
			# NOTE: use n and N to move between diff sections
			git config --global core.pager "delta"
			git config --global interactive.diffFilter "delta --color-only --features=interactive"
			git config --global delta.features "decorations"
			git config --global delta.side-by-side "true"
			git config --global delta.line-numbers "true"
			git config --global delta.interactive.keep-plus-minus-markers "false"
			git config --global delta.decorations.commit-decoration-style "blue ol"
			git config --global delta.decorations.commit-style "raw"
			git config --global delta.decorations.file-style "omit"
			git config --global delta.decorations.hunk-header-decoration-style "blue box"
			git config --global delta.decorations.hunk-header-file-style "red"
			git config --global delta.decorations.hunk-header-line-number-style "#067a00"
			git config --global delta.decorations.hunk-header-style "file line-number syntax"
		fi
	}
fi

#######################################################
# General Aliases
# NOTE: To temporarily bypass an alias, we proceed the command with a \
# EG: if the ls command is aliased, to use the normal command you would type \ls
#######################################################

# Update this .bashrc and .bashrc_help files
if [[ -x "$(command -v curl)" ]]; then
	if [[ -f "$HOME/.config/bashrc/help" ]]; then
	alias bashrcupdate='curl -L https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc/download --output ~/.bashrc && curl https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc_help/download --output ~/.config/bashrc/help && echo "Restart your terminal to see the changes."'
	else
	alias bashrcupdate='curl -L https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc/download --output ~/.bashrc && curl https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc_help/download --output ~/.bashrc_help && echo "Restart your terminal to see the changes."'
	fi
elif [[ -x "$(command -v wget)" ]]; then
	if [[ -f "$HOME/.config/bashrc/help" ]]; then
		alias bashrcupdate='wget -O ~/.bashrc https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc/download && wget -O ~/.config/bashrc/help https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc_help/download && echo "Restart your terminal to see the changes."'
	else
		alias bashrcupdate='wget -O ~/.bashrc https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc/download && wget -O ~/.bashrc_help https://sourceforge.net/projects/ultimate-bashrc/files/_bashrc_help/download && echo "Restart your terminal to see the changes."'
	fi
else
	alias bashrcupdate='echo "Please install wget or curl, or visit https://sourceforge.net/projects/ultimate-bashrc/ to update.'
fi

# Show help for this .bashrc file (type hlp or press CONTROL-H)
if [[ -f "$HOME/.config/bashrc/help" ]]; then
	alias hlp='\less -f -r -n -S "$HOME/.config/bashrc/help"'
elif [[ -f "$HOME/.bashrc_help" ]]; then
	alias hlp='\less -f -r -n -S "$HOME/.bashrc_help"'
fi

# Create an alias to run the default editor (like sudoedit without the sudo)
alias edit="$EDITOR"

# Edit this .bashrc file
alias ebrc='edit ~/.bashrc'

# Show a list of available aliases and functions
alias a='_listcommands | \less -n -S'
function _listcommands() {
	local COLOR="\033[1;31m" # Light Red
	local NOCOLOR="\033[0m"
	echo -e "${COLOR}Aliases:${NOCOLOR}"
	# compgen -A alias
	alias | awk -F'[ =]' '{print "\033[33m"$2"\033[0m\t\033[34m"$0"\033[0m";}'
	echo
	echo -e "${COLOR}Functions:${NOCOLOR}"
	compgen -A function | grep -v '^_.*'
}

# Aliases for systemd
if [[ -x "$(command -v systemctl)" ]]; then
	# Get a list of all services
	alias services='systemctl list-units --type=service --state=running,failed'
	alias servicesall='systemctl list-units --type=service'

	# Find what systemd services have failed
	alias failed='systemctl --failed'

	# Get the status of a services
	alias servicestatus='sudo systemctl status'

	# Start or stop services
	alias servicestart='sudo systemctl start'
	alias servicestop='sudo systemctl stop'
	alias servicekill='sudo systemctl kill'
	alias servicerestart='sudo systemctl restart' # Stop and start
	alias servicereload='sudo systemctl reload'   # Reload configuration
fi

# Vlock - lock all terminals
# Install: sudo apt install vlock
# Install: sudo pacman -S kbd
# https://odysee.com/@DistroTube:2/lock-your-terminal-sessions-with-vlock:0
if [[ -x "$(command -v vlock)" ]]; then
	# Alias Vlock to lock all terminals and can be typed with one hand
	alias lok='vlock --all'
fi

# Search command line history
alias h='history | grep'

# Alias to launch a document, file, or URL in it's default X application
if [[ -x "$(command -v xdg-open)" ]]; then
	alias open='xdg-open'
fi

# Alias for Midnight Commander (mc) to exit into current directory
# https://stackoverflow.com/questions/39017391/how-to-make-midnight-commander-exit-to-its-current-directory
if [[ -f "/usr/lib/mc/mc-wrapper.sh" ]]; then
	alias mc='source /usr/lib/mc/mc-wrapper.sh'
fi

### CHANGING AND LISTING DIRECTORIES

# Alias and bookmark the web folder (try to guess it's location)
if [[ -d /var/www/html ]]; then
	alias web='cd /var/www/html'
	export web="/var/www/html"
elif [[ -d /srv/http ]]; then
	alias web='cd /srv/http'
	export web="/srv/http"
fi

# If lsx enhanced directory navigation is found, source it
# Link: https://github.com/souvikinator/lsx
if [[ -f "$HOME/.config/lsx/lsx.sh" ]]; then
	source ~/.config/lsx/lsx.sh
fi
# If lsx is installed, alias it to see hidden directories
if [[ -x "$(command -v lsx)" ]]; then
	alias lsx='lsx -a'
fi

# If nnn is installed, add an alias for a directory listing
# Link: https://github.com/jarun/nnn/
# The following command installs or updates all plugins:
# Install: curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs | sh
# Plugins are installed to ${XDG_CONFIG_HOME:-$HOME/.config}/nnn/plugins
if [[ -x "$(command -v nnn)" ]]; then
	if [[ -f "$HOME/.config/nnn/plugins/finder" ]]; then
		export NNN_PLUG='f:finder;o:fzopen;p:mocplay;d:diffs;t:nmount;v:imgview'
		alias nnnplugins='curl -Ls https://raw.githubusercontent.com/jarun/nnn/master/plugins/getplugs | sh'
	fi
	alias nnn='nnn -e'
	alias lll='nnn -Headr'
fi

# List folders recursively in a tree
if [[ -x "$(command -v tree)" ]]; then
	alias treed='\tree -CAFd'
fi

# List files recursively in a tree
if [[ $_SKIP_EXA = false ]] && [[ -x "$(command -v exa)" ]]; then
	# If exa is installed...
	# Link: https://github.com/ogham/exa
	alias tree='\exa --all --git --group-directories-first --header --long --tree'
elif [[ -x "$(command -v lsd)" ]]; then
	# If lsd is installed...
	# Link: https://github.com/Peltoche/lsd
	alias tree='\lsd --all --blocks permission,user,size,date,name --group-dirs first --header --long --tree'
elif [[ -x "$(command -v tree)" ]]; then
	# If tree is installed...
	# Link: https://www.tecmint.com/linux-tree-command-examples/
	alias tree='\tree -CAhF --dirsfirst'
fi

# Aliases for multiple directory listing commands
if [[ $_SKIP_LS_COLORIZED = false ]]; then

	# If exa (with Git support) is installed...
	# Link: https://github.com/ogham/exa
	if [[ $_SKIP_EXA = false ]] && [[ -x "$(command -v exa)" ]]; then
		alias ls='exa --all --classify --group-directories-first --color=auto --color-scale'
		alias ll='exa --long --all --links --group --modified --classify --git --group-directories-first --color=auto --color-scale'
		alias labc='exa --grid --all --classify --color=auto --color-scale --sort name'
		alias lx='exa --long --all --links --group --modified --classify --git --group-directories-first --color=auto --color-scale --sort extension'
		alias lk='exa --long --all --links --group --modified --classify --git --group-directories-first --color=auto --color-scale --sort size'
		alias lt='exa --long --all --links --group --modified --classify --git --group-directories-first --color=auto --color-scale --sort modified'
		alias lc='exa --long --all --links --group --modified --changed --classify --git --group-directories-first --color=auto --color-scale --sort changed'
		alias lu='exa --long --all --links --group --modified --accessed --classify --git --group-directories-first --color=auto --color-scale --sort accessed'
		alias new='exa --long --all --links --group --modified --classify --git --group-directories-first --color=auto --color-scale --sort modified | tail -10 | tac'
		alias lw='exa --all --classify --group-directories-first --color=auto --color-scale'
		alias lm='\ls -alh --color=always | \less -S'
		alias lr='exa --grid --all --classify --group-directories-first --color=auto --color-scale --recurse'
		alias l.='\ls -aFhd .*'
		alias lf="ls -l | egrep -v '^d'"
		alias ldir='exa --all --classify --group-directories-first --color=auto --color-scale --only-dirs'

		# Add icons to exa if unicode and the icon paramter is supported
		if [[ $(locale charmap) == 'UTF-8' ]]; then
			(\exa --help | grep -q -e "--icons" &> /dev/null) && alias exa='exa --icons'
		fi

	# If lsd is installed, use it instead
	# Link: https://github.com/Peltoche/lsd
	elif [[ -x "$(command -v lsd)" ]]; then
		alias ls='lsd -aF --group-dirs first'
		alias ll='lsd --all --header --long --group-dirs first'
		alias labc='lsd -lav --header'
		alias lx='lsd -laXh --header'
		alias lk='lsd -laSrh --header'
		alias lt='lsd -latrh --header'
		alias lc='\ls -lacrh --color=always --header'
		alias lu='\ls -laurh --color=always --header'
		alias new='lsd -latr --almost-all | tail -10 | tac'
		alias lw='\ls -xAh --color=always'
		alias lm='\ls -alh --color=always | \less -S'
		alias lr='lsd -lRh'
		alias l.='lsd -d .*'
		alias lf="lsd -la | egrep -v '^d'"
		alias ldir="\ls -la --color=always | egrep '^d'"

	# Use ls with command line options
	else
		alias ls='ls -aFh --color=always --group-directories-first'
		alias labc='ls -lap'                  # sort alphabetically
		alias lx='ll -laXBh'                  # sort by extension
		alias lk='ll -laSrh'                  # sort by size
		alias lt='ll -latrh'                  # sort by date
		alias lc='ll -lacrh'                  # sort by change time
		alias lu='ll -laurh'                  # sort by access time
		alias new='ls -latr | tail -10 | tac' # list recently created/updated files
		alias lw='ls -xAh'                    # wide listing format
		alias lm='ll -alh | \less -S'         # pipe through less
		alias lr='ls -lRh'                    # recursive ls
		alias l.='ll -d .* --color=auto'      # show hidden files
		alias lf="ls -l | egrep -v '^d'"      # files only
		alias ldir="ls -la | egrep '^d'"      # directories only

		if [[ $_SKIP_GRC = false ]] && [[ -x "$(command -v grc)" ]]; then
			# If grc Generic Colouriser is installed
			# Link: https://github.com/garabik/grc
			alias ll='grc ls -l --all --classify --group-directories-first --human-readable --color=always'
		else
			# Use standard long listing format
			alias ll='llcolor'
		fi
	fi
else
	alias ls='ls -aFh --color=always'     # do add built-in colors to file types
	alias ll='ls -Fls'                    # long listing
	alias labc='ls -lap'                  # sort alphabetically
	alias lx='ll -laXBh'                  # sort by extension
	alias lk='ll -laSrh'                  # sort by size
	alias lt='ll -latrh'                  # sort by date
	alias lc='ll -lacrh'                  # sort by change time
	alias lu='ll -laurh'                  # sort by access time
	alias new='ls -latr | tail -10 | tac' # list recently created/updated files
	alias lw='ls -xAh'                    # wide listing format
	alias lm='ll -alh | \less -S'         # pipe through less
	alias lr='ls -lRh'                    # recursive ls
	alias l.='ll -d .*'                   # show hidden files
	alias lf="ls -l | egrep -v '^d'"      # files only
	alias ldir="ls -la | egrep '^d'"      # directories only
fi

# List all files larger than a given size
# llfs +10k will find and display all files larger than 10 kilobytes in the currect directory
alias llfs='_f(){ find . -type f -size "$1" -exec ls --color --classify --human-readable -l {} \; ; }; _f'

# Show colors with the dir command
if [[ -x "$(command -v dir)" ]]; then
	alias dir='dir --color=auto'
	alias vdir='vdir --color=auto'
fi

# Show the previous path
alias pwd-='echo ${OLDPWD}'

# Show full path of file or wildcard
alias fullpath='find "`pwd`" -name'

# List the PATH environment variable directories
alias path='echo -e ${PATH//:/\\n}'

# When changing a directory, don't show an extra line with the directory
# Link: https://askubuntu.com/questions/1316485/how-do-i-stop-cd-command-from-printing-absolute-path-everytime
if [[ $_SILENCE_CD_OUTPUT = true ]]; then
	alias cd='>/dev/null cd'
fi

# Change to the home directory
alias home='cd ~'

# Allow changing directory when missing a space
alias cd..='cd ..'

# Allow changing directory back when missing a space
alias cd-='cd -'

# Go back directories dot style
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

# Go back directories dot dot number style
alias ..2='..; ..'
alias ..3='..2; ..'
alias ..4='..3; ..'
alias ..5='..4; ..'

### FIND FILES OR FILE INFORMATION

# Searches for filenames (can use wildcards)
if [[ -x "$(command -v fdfind)" ]]; then
	# Use fdfind if installed
	# Link: https://github.com/sharkdp/fd
	alias f='fdfind'
elif [[ -x "$(command -v fd)" ]]; then
	# Use the shorter fd command
	alias f='fd'
else
	alias f='find . -type f -iname'
fi

# Searches for directories (can use wildcards)
# Example: finddir config
# Example: finddir "This has spaces"
alias finddir='find . -type d -iname'

# To count how many files are in your current file system location:
alias countfiles='find . -type f | wc -l'

# Show logs in color
if [[ -x "$(command -v multitail)" ]]; then
	alias multitail='multitail -c'
fi

# Show all logs in /var/log
alias logs="find /var/log -type f -exec file {} \; | grep 'text' | cut -d' ' -f1 | sed -e's/:$//g' | grep -v '[0-9]$' | xargs tail -f"

# To see if a command is aliased, a file, or a built-in command
alias check="type -t"

# If the mlocate package is installed
if [[ -x "$(command -v locate)" ]]; then
	# Case insensitive search and display only files present in your system
	alias locate='locate -i -e'

	# Update the locate database before locating a file
	alias ulocate='sudo updatedb && locate'

	# Always update the locate (mlocate) database as root
	alias updatedb='sudo updatedb'

	# Display the number of matching entries
	alias locount='locate -c'
fi

### FILE AND DIRECTORY MANAGEMENT

# When copying files, prompt before overwriting a file
alias cp='cp -i'

# When moving files, prompt for confirmation if the destination path exists
# Use -f if you want to skip all prompts (-i option is ignored)
alias mv='mv -i'

# Prompt whether to remove destinations
alias ln='ln -i'

# Prompt before every removal
alias rm='rm -I --preserve-root'

# Remove a directory and all files
alias rmd='\rm --recursive --force --verbose'

# When shredding files, shred no matter permissions and remove the file(s)
alias shred='shred --force --remove --verbose'

# Make parent directories as needed
alias mkdir='mkdir -p'

# Safety net for changing permisions on /
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'

# Alias to make a file executable
# A combination of the letters ugoa controls which users' access to the
# file will be changed: the user who owns it (u), other users in the
# file's group (g), other users not in the file's group (o), or all users
# (a). If none of these are given, the effect is as if (a) were given,
# but bits that are set in the umask are not affected.
alias mx='chmod a+x'

# Make mount command output pretty and human readable format
alias mount='mount | column -t'
alias m='mount'
alias um='umount'

# Display disk space available and show file system type
alias df='df --human-readable --print-type --block-size=1K --exclude-type=squashfs'
alias ds='df --exclude-type=tmpfs'

# dua Disk Space Analyzer in interactive mode (in color)
# Link: https://github.com/Byron/dua-cli
# Install: curl -LSfs https://raw.githubusercontent.com/byron/dua-cli/master/ci/install.sh | \sh -s -- --git byron/dua-cli --target x86_64-unknown-linux-musl --crate dua
if [[ -f "$HOME/.cargo/bin/dua" ]]; then
	alias diskspace="$HOME/.cargo/bin/dua i"
elif [[ -x "$(command -v dua)" ]]; then
	alias diskspace='dua i'
# Ncdu is a disk usage analyzer with an ncurses interface
# Link: https://dev.yorhel.nl/ncdu
elif [[ -x "$(command -v ncdu)" ]]; then
	alias diskspace='ncdu'
# List all folders disk space sorted by largest space
else
	alias diskspace='du -S | sort -n -r | more'
fi

# List disk space of immediate folders one level deep
alias folders='du -kh --max-depth=1'

# List block devices but show more info about the files systems and permissions
# and removes all snap packages
alias lsb='lsblk --fs --perms | grep -v \/snap'

# f3 - test and check real capacity for USB devices (backup your drive first)
# Link: https://github.com/AltraMayor/f3
# Link: https://www.linuxbabe.com/command-line/f3-usb-capacity-fake-usb-test-linux
if [[ -x "$(command -v f3probe)" ]]; then
	alias usbtest='sudo f3probe --destructive --time-ops'
fi

# Aliases for archives
alias mkbz2='tar -cvjf'
alias unbz2='tar -xvjf'
alias mkgz='tar -cvzf'
alias ungz='tar -xvzf'
alias mktar='tar -cvf'
alias untar='tar -xvf'

# SHA1
alias sha1='openssl sha1'

# Alias to fuzzy find files, preview them, and launch in an editor
if [[ -x "$(command -v fzf)" ]]; then
	if [[ -x "$(command -v xdg-open)" ]]; then
		alias fzfpreview='xdg-open $(fzf --info=inline --preview="$PAGER {}")'
	else
		alias fzfpreview='edit $(fzf --info=inline --preview="$PAGER {}")'
	fi
fi

# Check shell script syntax
if [[ -x "$(command -v shellcheck)" ]]; then
	alias schk='shellcheck'
fi

### DATE AND TIME

# Show the time
alias now='date +"%T"'

# Show the short date
alias today='date +"%Y-%m-%d"'

# Stop watch
alias stopwatch='date && echo "Press CTRL-D to stop" && time read'

# Countdown timer and stop watch
# Link: https://github.com/trehn/termdown
# Fonts: banner3, big, computer, doh, letters, roman, small, standard, univers
# Link: http://www.figlet.org/examples.html
if [[ -x "$(command -v termdown)" ]]; then
	alias termdown='termdown --blink --end --critical 10 --font doh'
	alias countdown="termdown --help | sed -n '/Options\:/q;p'"
	alias timer='termdown'
	alias clock='termdown --time'
fi

### CPU, MEMORY, AND PROCESSES

# Display amount of free and used memory
alias free='free -h'

# When reporting a snapshot of the current processes:
# a = all users
# u = user-oriented format providing detailed information
# x = list the processes without a controlling terminal
# f = display a tree view of parent to child processes
alias ps='ps auxf'

# Show top ten processes
alias cpu='ps aux | sort -r -nk +4 | head | $PAGER'

# Show CPU information
alias cpuinfo='lscpu | $PAGER'

# Show the USB device tree
if [[ -x "$(command -v lsusb)" ]]; then
	alias usb='lsusb -t'
fi

# Show the PCI device tree
if [[ -x "$(command -v lspci)" ]]; then
	alias pci='lspci -tv'
fi

# Alias top
# Link: https://ostechnix.com/some-alternatives-to-top-command-line-utility-you-might-want-to-know/
# Link: https://www.linuxlinks.com/alternativestotop/
if [[ -x "$(command -v btop)" ]]; then
	alias top='btop'
elif [[ -x "$(command -v bpytop)" ]]; then
	alias top='bpytop'
elif [[ -x "$(command -v bashtop)" ]]; then
	alias top='bashtop'
elif [[ -x "$(command -v nmon)" ]]; then
	alias top='nmon'
elif [[ -x "$(command -v glances)" ]]; then
	alias top='glances'
elif [[ -x "$(command -v ytop)" ]]; then
	alias top='ytop'
elif [[ -x "$(command -v gtop)" ]]; then
	alias top='gtop'
elif [[ -x "$(command -v htop)" ]]; then
	alias top='htop'
fi

# Alias bottom
# Link: https://github.com/ClementTsang/bottom
if [[ -x "$(command -v btm)" ]]; then
	alias bottom='btm'
fi

# Show jobs
alias j='jobs -l'

# Change the cursor to a crosshair to select a window
if [[ -x "$(command -v xprop)" ]]; then
	alias windowinfo='xprop'
fi

# Get active X-window process ID after a 3 second delay (requires xdotool)
if [[ -x "$(command -v xdotool)" ]]; then
	alias activewinpid='sleep 3 && xdotool getactivewindow getwindowpid'
fi

### NETWORKING

# Resume wget by default
if [[ -x "$(command -v wget)" ]]; then
	alias wget='wget -c'
fi

# aria2 is a lightweight multi-protocol & multi-source command-line download utility
# It supports HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink with multiple connections
# Link: https://aria2.github.io/
if [[ -x "$(command -v aria2c)" ]]; then
	alias {aria2c,download}='aria2c --max-connection-per-server=10 --continue=true --async-dns=false'
elif [[ -x "$(command -v wget)" ]]; then
	alias download='wget -c'
elif [[ -x "$(command -v curl)" ]]; then
	alias download='curl -L'
fi

# Stop pinging after sending 5 ECHO_REQUEST packets
alias ping='ping -c 5'

# Do not wait for ping interval 1 second, go fast
alias fastping='ping -c 100 -i.2'

# Show open ports
alias ports='netstat -tulanp'

# If nmap is installed, set an alias for a network scan of a host (takes a while)
# Scan delay slows things down but reduces throttling, anti-ddos, auto-block
# Link: https://nmap.org/
# Example: netscan localhost
if [[ -x "$(command -v nmap)" ]]; then
	alias netscan='sudo nmap --scan-delay 1.1s -v --resolve-all -A -sTUV'
fi

# Get local IP addresses
if [[ -x "$(command -v ip)" ]]; then
	alias iplocal="ip -br -c a"
else
	alias iplocal="ifconfig | grep -Eo 'inet (addr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"
fi

# Get public IP address (several options)
alias ipexternal='wget -O - -q icanhazip.com && echo'
# alias ipexternal='wget -qO- ifconfig.me/ip && echo'
# alias ipexternal='curl ipinfo.io/ip && echo'

# Add an "alert" alias for long running commands
# Example: sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

### VISUAL

# Colorize the grep command output for ease of use (good for log files)
alias grep='grep --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'

# Colorize messages for the kernel ring buffer
alias dmesg='dmesg --color'

# Clear the screen with both clear and cls shorthand
alias {cls,c}='clear'

# If lolcat is installed, show rainbow bars when the screen is cleared
if [[ -x "$(command -v lolcat)" ]]; then
	# random_bars | lolcat --animate --seed=1 --freq=0.12
	alias clear='clear && echo && random_bars | lolcat && echo'
fi

# Convert images to ASCII in color
if [[ -x "$(command -v jp2a)" ]]; then
	alias jp2a='jp2a --color'
fi

# List fonts for toilet
if [[ -x "$(command -v toilet)" ]]; then
	alias toiletfont='ls /usr/share/figlet'
	alias toiletfontlist='for file in /usr/share/figlet/*.?lf; do toilet -f $(basename "$file") $(basename "$file"); done'
fi

# Video capture the Linux destop
if [[ -x "$(command -v ffmpeg)" ]]; then
	alias grabvideo='ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -qscale 0 ~/video_out.mpg'
fi

# Launch the cmatrix screen saver
if [[ -x "$(command -v cmatrix)" ]]; then
	alias matrix='cmatrix -b'
fi

### MISCELLANEOUS

# Spell check a word with DidYouMean
# Link: https://github.com/hisbaan/didyoumean
if [[ -x "$(command -v dym)" ]]; then
	alias spell='dym -n 10 -y'
fi

# Alias's for safe and forced reboots
alias rebootsafe='sudo shutdown -r now'
alias rebootforce='sudo shutdown -r -n now'

# Alias to clear RAM memory cache, buffer and swap space
# Link: https://www.tecmint.com/clear-ram-memory-cache-buffer-and-swap-space-on-linux/
alias flushcache="sudo free -h && sudo su -c \"echo 3 >'/proc/sys/vm/drop_caches' && swapoff -a && swapon -a && printf '\n\033[1;33m%s\033[0m\n\n' 'Ram-cache and Swap Cleared'\" root&& free -h"

# Start calculator with math support
# Link: https://www.gnu.org/software/bc/manual/html_mono/bc.html
if [[ -x "$(command -v bc)" ]]; then
	alias bc='bc --mathlib'
fi

# Glow is one of the best CLI markdown viewers with pager support
# Link: https://github.com/charmbracelet/glow
if [[ -x "$(command -v glow)" ]]; then
	alias glow='glow --all --pager'

	# Use --local if you want to load markdown without internet files or images
	alias glowsafe='glow --all --pager --local'
fi

# When updating virus definitions, do it as root
if [[ -x "$(command -v freshclam)" ]]; then
	alias freshclam='sudo freshclam'
fi

# Aliases to modify GRUB
# https://www.howtogeek.com/196655/how-to-configure-the-grub2-boot-loaders-settings/
alias grubedit='sudoedit /etc/default/grub'
alias grubsave='sudo update-grub'

# Aliases for BtrFS file systems
if [[ -x "$(command -v btrfs)" ]]; then
	alias btrcheck='sudo btrfs fi show'                        # Check status of raid drives
	alias btrstats='sudo btrfs device stats'                   # Show device statistics
	alias btrscrub='sudo btrfs scrub start'                    # Start a scrub
	alias btrpause='sudo btrfs scrub cancel'                   # Cancel or pause a scrub
	alias btrresume='sudo btrfs scrub resume'                  # Resume a paused scrub
	alias btrstatus='sudo btrfs scrub status'                  # Show status of a scrub
	alias btrdefragfile='sudo btrfs filesystem defragment -vf' # Defrag a file
	alias btrdefragdir='sudo btrfs filesystem defragment -rvf' # Defrag a directory
fi

# Aliases for tmux terminal multiplexer if installed
# alias tm='tmux a -t main || tmux new -s main'
if [[ -x "$(command -v tmux)" ]]; then

	# Function to load TMUX with default session defined by _TMUX_LOAD_SESSION_NAME
	# If TMUX is already running, switch to a session name passed in as a parameter
	# TIP: Use CTRL-d to detach your session which closes but leaves the session
	# running. CTRL-d will also exit bash once outside of TMUX.
	function tm() {

		# Get the passed in or default session name
		if [[ -n "${@}" ]]; then
			local SESSION_NAME="${@}"
		elif [[ -n "${_TMUX_LOAD_SESSION_NAME}" ]]; then
			local SESSION_NAME="${_TMUX_LOAD_SESSION_NAME}"
		elif [[ "$(tmux list-sessions 2> /dev/null | wc -l)" -gt 0 ]]; then
			local SESSION_NAME=""
		else
			local SESSION_NAME="$(whoami)"
		fi

		# Create the session if it doesn't exists
		TMUX='' tmux new-session -d -s "${SESSION_NAME}" 2> /dev/null

		# Attach if outside of TMUX
		if [[ -z "$TMUX" ]]; then
			tmux attach -t "${SESSION_NAME}" 2> /dev/null && exit

		# Switch if we are already inside of TMUX
		else
			tmux switch-client -t "${SESSION_NAME}" 2> /dev/null
		fi
	}

	# alias tm="tmux new-session -A -s $_TMUX_LOAD_SESSION_NAME"
	alias tmlist='tmux ls'
	alias tmclients='tmux lsc'
	alias tmnew='tmux new -s'
	alias tmattach='tmux new-session -A -s' # 'tmux a -t'
	alias tmrename='tmux rename -t'
	alias tmd='tmux detach'
	alias tmkill='tmux kill-session -t'
	alias tmreset='tmux kill-server'
fi

# Alias thefuck that corrects errors in previous console commands
# Link: https://github.com/nvbn/thefuck
if [[ -x "$(command -v thefuck)" ]]; then
	eval $(thefuck --alias fix)
fi

#######################################################
# Easy Package Management Aliases
#######################################################

# Depending on the installed package managers, set up some package aliases
if [[ -x "$(command -v paru)" ]]; then       # Arch
	# Link: https://github.com/Morganamilo/paru
	# Link: https://itsfoss.com/paru-aur-helper/
	# NOTE: To get search results to start at the bottom and go upwards, enable BottomUp in paru.conf
	alias has='paru -Si'
	alias pkgupdateall='paru -Syyu --sudoloop --noconfirm && if type flatpak >/dev/null 2>&1; then sudo flatpak update --assumeyes --noninteractive; fi && if type snap >/dev/null 2>&1; then sudo snap refresh; fi && if type tldr >/dev/null 2>&1; then tldr --update; fi'
	alias pkgupdate='paru --sync --sudoloop --noconfirm'
	alias pkginstall='paru --sync --sudoloop --noconfirm'
	alias pkgremove='paru --remove'
	alias pkgclean='paru --clean'
	alias pkgsearch='paru'
	alias pkglist='paru -Qe'
	alias pkglistmore='paru -Q' # Also includes dependencies
elif [[ -x "$(command -v yay)" ]]; then      # Arch
	# Link: https://github.com/Jguer/yay
	alias has='yay -Si'
	alias pkgupdateall='yay -Syyu && if type flatpak >/dev/null 2>&1; then sudo flatpak update; fi && if type snap >/dev/null 2>&1; then sudo snap refresh; fi && if type tldr >/dev/null 2>&1; then tldr --update; fi'
	alias pkgupdate='yay -S'
	alias pkginstall='yay -S'
	alias pkgremove='yay -Rsc'
	alias pkgclean='yay -Yc'
	alias pkgsearch='yay'
	alias pkglist='yay -Qe'
	alias pkglistmore='yay -Q' # Also includes dependencies
elif [[ -x "$(command -v pamac)" ]]; then    # Manjaro
	# Link: https://wiki.manjaro.org/index.php/Pamac
	alias has='sudo pamac info'
	alias pkgupdateall='sudo pamac upgrade -a && if type tldr >/dev/null 2>&1; then tldr --update; fi'
	alias pkgupdate='sudo pamac update'
	alias pkginstall='sudo pamac install'
	alias pkgremove='sudo pamac remove'
	alias pkgclean='sudo pamac remove --orphans'
	alias pkgsearch='sudo pamac search -a'
	alias pkglist='pacman -Qe'
	alias pkglistmore='pacman -Q' # Also includes dependencies
elif [[ -x "$(command -v pacman)" ]]; then   # Arch (No AUR)
	# Link: https://archlinux.org/pacman/
	alias has='pacman -Q --info'
	alias pkgupdateall='sudo pacman -Syyu && if type flatpak >/dev/null 2>&1; then sudo flatpak update; fi && if type snap >/dev/null 2>&1; then sudo snap refresh; fi && if type tldr >/dev/null 2>&1; then tldr --update; fi'
	alias pkgupdate='sudo pacman -S'
	alias pkginstall='sudo pacman -S'
	alias pkgremove='sudo pacman -Rsc'
	alias pkgclean='pacman -Qtdq | sudo pacman -Rns -'
	alias pkgsearch='pacman -Ss'
	alias pkglist='pacman -Qe'
	alias pkglistmore='pacman -Q' # Also includes dependencies
elif [[ -x "$(command -v dnf)" ]]; then      # RedHat/Fedora
	# Link: https://fedoraproject.org/wiki/DNF
	alias has='dnf info'
	alias pkgupdateall='sudo dnf upgrade --refresh'
	alias pkgupdate='sudo dnf upgrade'
	alias pkginstall='sudo dnf install'
	alias pkgremove='sudo dnf remove'
	alias pkgclean='sudo dnf autoremove'
	alias pkgsearch='sudo dnf search'
	alias pkglist='dnf list installed'
	alias pkgdependencies='yum whatprovides'
elif [[ -x "$(command -v yum)" ]]; then      # RedHat/Fedora
	# Link: https://access.redhat.com/articles/yum-cheat-sheet
	alias has='yum info'
	alias pkgupdateall='sudo yum clean all && yum -y update'
	alias pkgupdate='sudo yum update'
	alias pkginstall='sudo yum install'
	alias pkgremove='sudo yum remove'
	alias pkgclean='sudo yum autoremove'
	alias pkgsearch='sudo yum search'
	alias pkglist='yum list installed'
	alias pkgdependencies='yum whatprovides'
elif [[ -x "$(command -v nala)" ]]; then     # Debian/Ubuntu/Raspbian
	# Link: https://gitlab.com/volian/nala
	alias has='nala show'
	alias pkgupdateall='sudo nala update --update --assume-yes && if type pacstall >/dev/null 2>&1; then pacstall --upgrade; fi'
	alias pkgupdate='sudo nala update'
	alias pkginstall='sudo nala install --install-suggests'
	alias pkgremove='sudo nala remove'
	alias pkgclean='sudo nala clean --fix-broken'
	alias pkgsearch='sudo nala search'
	alias pkglist='sudo nala list --installed'
elif [[ -x "$(command -v apt)" ]]; then      # Debian/Ubuntu/Raspbian
	# Link: https://itsfoss.com/apt-command-guide/
	alias has='apt show'
	alias pkgupdateall='sudo apt update --assume-yes && sudo apt upgrade --assume-yes && if type pacstall >/dev/null 2>&1; then pacstall --upgrade; fi && if type tldr >/dev/null 2>&1; then tldr --update; fi'
	alias pkgupdate='sudo apt-get install --only-upgrade'
	alias pkginstall='sudo apt install'
	alias pkgremove='sudo apt remove'
	alias pkgclean='sudo apt autoremove'
	alias pkgsearch='sudo apt search'
	alias pkglist='sudo apt list --installed'
	alias pkgcheck='sudo apt update --assume-yes && apt list --upgradable'
elif [[ -x "$(command -v apt-get)" ]]; then  # Debian/Ubuntu
	# Link: https://help.ubuntu.com/community/AptGet/Howto
	alias has='apt-cache show'
	alias pkgupdateall='sudo apt-get update && sudo apt-get upgrade && if type pacstall >/dev/null 2>&1; then pacstall --upgrade; fi && if type tldr >/dev/null 2>&1; then tldr --update; fi'
	alias pkgupdate='sudo apt-get install --only-upgrade'
	alias pkginstall='sudo apt-get install'
	alias pkgremove='sudo apt-get remove'
	alias pkgclean='sudo apt-get autoremove'
	alias pkgsearch='sudo apt-cache search'
	alias pkglist='sudo dpkg -l'
elif [[ -x "$(command -v zypper)" ]]; then   # SUSE
	# Link: https://en.opensuse.org/SDB:Zypper_usage
	alias has='zypper info'
	alias pkgupdateall='sudo zypper patch'
	alias pkgupdate='sudo zypper up'
	alias pkginstall='sudo zypper in'
	alias pkgremove='sudo zypper rm'
	alias pkgclean='sudo zypper packages --orphaned'
	alias pkgsearch='sudo zypper se'
	alias pkglist='zypper se --installed-only'
elif [[ -x "$(command -v eopkg)" ]]; then    # Solus
	# Link: https://getsol.us/articles/package-management/basics/en/
	alias has='sudo eopkg info'
	alias pkgupdateall='sudo eopkg upgrade'
	alias pkgupdate='sudo eopkg upgrade'
	alias pkginstall='sudo eopkg install'
	alias pkgremove='sudo eopkg remove'
	alias pkgsearch='sudo eopkg search'
	alias pkglist='eopkg li -l'
elif [[ -x "$(command -v emerge)" ]]; then   # Gentoo (Portage)
	# Link: https://www.linode.com/docs/guides/portage-package-manager/
	alias has='equery files'
	alias pkgupdateall='sudo emerge --sync && sudo emerge --update --deep --with-bdeps=y --newuse @world && sudo emerge --depclean && sudo revdep-rebuild'
	alias pkgupdate='sudo emerge -u'
	alias pkginstall='sudo emerge'
	alias pkgremove='sudo emerge --depclean'
	alias pkgsearch='sudo emerge --search'
	alias pkglist='equery list "*"'
elif [[ -x "$(command -v slackpkg)" ]]; then # Slackware
	# Link: https://www.linux.com/training-tutorials/intro-slackware-package-management/
	alias has='slackpkg info'
	alias pkgupdateall='slackpkg update && slackpkg install-new && slackpkg upgrade-all'
	alias pkgupdate='upgradepkg'
	alias pkginstall='installpkg'
	alias pkgremove='removepkg'
	alias pkglist='pkgtool'
elif [[ -x "$(command -v urpmi)" ]]; then    # Mandrake
	# Link: https://wiki.mageia.org/en/URPMI
	alias has='urpmq --summary -Y'
	alias pkgupdateall='urpmi --auto-update'
	alias pkgupdate='urpmi'
	alias pkginstall='urpmi'
	alias pkgremove='urpme'
	alias pkgsearch='urpmq --summary -Y'
	alias pkglist='rpm -qa'
elif [[ -x "$(command -v apt-cyg)" ]]; then  # Cygwin
	# Link: http://stephenjungels.com/jungels.net/projects/apt-cyg/
	alias has='apt-cyg show'
	alias pkgupdateall='apt-cyg update'
	alias pkgupdate='apt-cyg update'
	alias pkginstall='apt-cyg install'
	alias pkgremove='apt-cyg remove'
	alias pkgsearch='apt-cyg find'
	alias pkglist='cygcheck --check-setup'
elif [[ -x "$(command -v brew)" ]]; then     # macOS
	# Link: https://brew.sh/
	alias has='brew info'
	alias pkgupdateall='brew update'
	alias pkgupdate='brew update'
	alias pkginstall='brew install'
	alias pkgremove='brew uninstall'
	alias pkgclean='brew cleanup'
	alias pkgsearch='brew search'
	alias pkglist='brew list'
fi

# If the package dependency tree viewer (Arch pacman-contrib) is installed...
if [[ -x "$(command -v pactree)" ]]; then
	alias pkgdependencies='pactree --color' # --unique --depth 1
	alias pkgwhatuses='pactree --reverse --color'
# If apt package manager is installed (Ubuntu)...
elif [[ -x "$(command -v apt-cache)" ]]; then
	alias pkgdependencies='apt-cache depends'
	# If apt-rdepends is installed (sudo apt install apt-rdepends)
	if [[ -x "$(command -v apt-rdepends)" ]]; then
		alias pkgwhatuses='apt-rdepends'
	fi
fi

# If this is an Arch based distrobution with pacman-contrib installed...
# Install: sudo pacman -S pacman-contrib
if [[ -x "$(command -v paccache)" ]]; then
	# Fix Arch Pacman install error "invalid or corrupted package" with a new
	# PGP key, clear anything older than the last 3 installs, and remove locks
	# Link: https://odysee.com/@DistroTube:2/solved-pacman-wouldn't-let-me-run-an:0
	alias pacman_fix='sudo rm -f /var/lib/pacman/db.lck && sudo paccache -r && sudo pacman -Sy archlinux-keyring'

	# The checkupdates script (also from Arch pacman-contrib) does not need sudo
	alias pkgcheck='checkupdates | sort | \less --no-init --ignore-case --LONG-PROMPT --LINE-NUMBERS'

	# Pacseek - browse and search through the Arch Linux package databases and AUR
	# Link: https://github.com/moson-mo/pacseek
	if [[ -x "$(command -v pacseek)" ]]; then
		alias pkg='pacseek'
	fi
fi

# Aliases for flatpak packages if installed
if [[ -x "$(command -v flatpak)" ]]; then
	alias flatpakhas='flatpak info'
	alias flatpakupdateall='sudo flatpak update'
	alias flatpakupdate='sudo flatpak update'
	alias flatpakinstall='sudo flatpak install'
	alias flatpakremove='sudo flatpak uninstall'
	alias flatpakclean='sudo flatpak repair && sudo flatpak uninstall --unused'
	alias flatpaksearch='flatpak search'
	alias flatpaklist='flatpak list --app'
	alias flatpaksize='flatpak --columns=app,name,size,installation list'

	# Create missing or recreate broken Flatpak icons (might require restart)
	if [ -d "/var/lib/flatpak/exports/share/applications/" ]; then
		alias flatpakmakeicons='\cp /var/lib/flatpak/exports/share/applications/*.desktop ~/.local/share/applications/'
	else
		alias flatpakmakeicons='find /var/lib/flatpak/app/ -type f -iname "*.desktop" -exec cp {} ~/.local/share/applications \;'
	fi

	# Make sure the Flatpak environment variable (for icons) is correct
	XDG_DATA_DIRS=$XDG_DATA_DIRS:/var/lib/flatpak/exports/share:$HOME/.local/share/flatpak/exports/share
fi

# Aliases for snap packages if installed
if [[ -x "$(command -v snap)" ]]; then
	alias snaphas='snap info'
	alias snapupdateall='sudo snap refresh --list'
	alias snapupdate='sudo snap refresh'
	alias snapinstall='sudo snap install'
	alias snapremove='sudo snap remove'
	alias snapclean='LANG=C snap list --all | while read snapname ver rev trk pub notes; do if [[ $notes = *disabled* ]]; then sudo snap remove "$snapname" --revision="$rev"; fi; done'
	alias snapsearch='snap find'
	alias snaplist='snap list'
	alias snapsize='du -hcs /var/lib/snapd/snaps/*'
fi

#######################################################
# Alias for sudo replacements on machines with one user
#######################################################

if [[ $_SKIP_SUDO_ALTERNATIVE = false ]]; then

	# A very slim alternative to both sudo and doas
	# Link: https://codeberg.org/sw1tchbl4d3/rdo
	# Config: sudoedit /etc/rdo.conf
	# username=yourusername
	# wrong_pw_sleep=1000
	# session_ttl=5
	if [[ -x "$(command -v rdo)" ]]; then
		alias sudo='rdo'

		# If sudoedit is not avaliable, alias it
		if [[ ! -x "$(command -v sudoedit)" ]]; then
			alias sudoedit='sudo --preserve-env edit'
		fi

	# A port of OpenBSD's doas offers two benefits over sudo:
	# 1) Its configuration file has a simple syntax and
	# 2) It is smaller, requiring less effort to audit the code
	# This makes it harder for both admins and coders to make mistakes that potentially open security holes in the system
	# Link: https://github.com/Duncaen/OpenDoas or https://github.com/slicer69/doas
	# Link: https://youtu.be/eamEZCj-CuQ
	# Config: Add "permit <user> as root" in /etc/doas.conf or /usr/local/etc/doas.conf
	elif [[ -x "$(command -v doas)" ]]; then
		alias sudo='doas'

		# Replace sudoedit only if doasedit exists
		# Link: https://github.com/AN3223/scripts/blob/master/doasedit
		if [[ -x "$(command -v doasedit)" ]]; then
			alias sudoedit='doasedit'
		fi
	fi
fi

#######################################################
# General Function Aliases
#######################################################

# Function to run upon exit of shell
function _exit() {
	# Show who logged out
	local COLOR="\033[1;31m"     # Light Red
	local HIGHLIGHT="\033[1;34m" # Light Blue
	local NOCOLOR="\033[0m"
	echo -e "${COLOR}User ${HIGHLIGHT}$(echo $USER)${COLOR} has logged out of ${HIGHLIGHT}$(echo $HOSTNAME)${COLOR}.${NOCOLOR}"
}
trap _exit EXIT

# Extracts any archive(s)
function extract() {
	for archive; do
		if [ -f "$archive" ] ; then
			case "$archive" in
				*.tar.bz2)   tar xvjf "$archive"   ;;
				*.tar.gz)    tar xvzf "$archive"   ;;
				*.bz2)       bunzip2 "$archive"    ;;
				*.rar)       rar x "$archive"      ;;
				*.gz)        gunzip "$archive"     ;;
				*.tar)       tar xvf "$archive"    ;;
				*.tbz2)      tar xvjf "$archive"   ;;
				*.tgz)       tar xvzf "$archive"   ;;
				*.zip)       unzip "$archive"      ;;
				*.Z)         uncompress "$archive" ;;
				*.7z)        7z x "$archive"       ;;
				*)           echo "don't know how to extract '$archive'..." ;;
			esac
		else
			echo "'$archive' is not a valid file!"
		fi
	done
}

# Generate a random password without installing any external tooling
# Pass the number of characters for the password on the command line
# Add the parameter +s to include symbols and -s to exclude them
# Example: genpw
# Example: genpw +s 24
# Example: genpw 8
# Example: genpw 12 -s
# HINT: Check passwords with cracklib: echo "1234abc" | cracklib-check
genpw() {
	local _PASSWORD_LENGTH
	local _PASSWORD_SYMBOLS

	if [[ ${1} -gt 0 ]]; then
		_PASSWORD_LENGTH=${1}
	elif [[ ${2} -gt 0 ]]; then
		_PASSWORD_LENGTH=${2}
	else
		read -e -i "16" -p "How many characters? " _PASSWORD_LENGTH
		if [[ ! ${_PASSWORD_LENGTH} -gt 0 ]]; then
			_PASSWORD_LENGTH=16
		fi
	fi

	if [[ ${1} == '-s' ]] || [[ ${2} == '-s' ]]; then
		_PASSWORD_SYMBOLS=false
	elif [[ ${1} == '+s' ]] || [[ ${2} == '+s' ]]; then
		_PASSWORD_SYMBOLS=true
	else
		if ask "Do you want to include symbols?" Y; then
			_PASSWORD_SYMBOLS=true
		fi
	fi

	if [[ -x "$(command -v apg)" ]]; then
		if [[ ${_PASSWORD_SYMBOLS} == true ]]; then
			apg -a 1 -n 10 -m ${_PASSWORD_LENGTH} -l
		else
			apg -a 0 -n 10 -m ${_PASSWORD_LENGTH} -l
		fi
	elif [[ -x "$(command -v pwgen)" ]]; then
		if [[ ${_PASSWORD_SYMBOLS} == true ]]; then
			pwgen --capitalize --numerals --symbols --secure -C ${_PASSWORD_LENGTH} 40
		else
			pwgen --capitalize --numerals --secure -C ${_PASSWORD_LENGTH} 40
		fi
	elif [[ -x "$(command -v gpg)" ]]; then
		for ((n=0;n<10;n++)); do
			if [[ ${_PASSWORD_SYMBOLS} == true ]]; then
				gpg --gen-random 1 1024 | tr -dc a-zA-Z0-9'`~!@#$%^&*-_=+()[]{}|;:",.?<>/\\'"'" | head -c${_PASSWORD_LENGTH}; echo
			else
				gpg --gen-random 1 1024 | tr -dc a-zA-Z0-9 | head -c${_PASSWORD_LENGTH}; echo
			fi
		done
	elif [[ -x "$(command -v openssl)" ]]; then
		for ((n=0;n<10;n++)); do
			if [[ ${_PASSWORD_SYMBOLS} == true ]]; then
				openssl rand 1024 | tr -dc a-zA-Z0-9'`~!@#$%^&*-_=+()[]{}|;:",.?<>/\\'"'" | head -c${_PASSWORD_LENGTH}; echo
			else
				openssl rand 1024 | tr -dc a-zA-Z0-9 | head -c${_PASSWORD_LENGTH}; echo
			fi
		done
	else
		for ((n=0;n<10;n++)); do
			if [[ ${_PASSWORD_SYMBOLS} == true ]]; then
				cat /dev/urandom | tr -dc a-zA-Z0-9'`~!@#$%^&*-_=+()[]{}|;:",.?<>/\\'"'" | head -c${_PASSWORD_LENGTH}; echo
			else
				cat /dev/urandom | tr -dc a-zA-Z0-9 | head -c${_PASSWORD_LENGTH}; echo
			fi
		done
	fi
}

# See what command you are using the most (this parses the history command)
function mostused() {
	history \
	| awk ' { a[$4]++ } END { for ( i in a ) print a[i], i | "sort -rn | head -n10"}' \
	| awk '$1 > max{ max=$1} { bar=""; i=s=10*$1/max;while(i-->0)bar=bar"#"; printf "%25s %15d %s %s", $2, $1,bar, "\n"; }'
}

# Start a program but immediately disown it and detach it from the terminal
function runfree() {
    $1 & disown $!
}

# Trim leading and trailing characters on the clipboard
if [[ -x "$(command -v xsel)" ]]; then
	function trimclipboard() {
		echo -e "$(xsel)" | sed 's/^[ 	]*//;s/[ 	]*$//' | xsel -bi
	}
fi

# Long format directory listing with color columns (only requires gawk)
function llcolor {
	if [[ -x "$(command -v gawk)" ]]; then
		# Show long directory listings with color columns
		\ls -l --all --classify --group-directories-first --human-readable --color=always "$@" | awk '
			BEGIN {
				FPAT = "([[:space:]]*[^[:space:]]+)";
				OFS = "";
			}
			{
				$1 = "\033[0;37m" $1 "\033[0m";
				$2 = "\033[0;34m" $2 "\033[0m";
				$3 = "\033[0;35m" $3 "\033[0m";
				$4 = "\033[0;31m" $4 "\033[0m";
				$5 = "\033[0;33m" $5 "\033[0m";
				$6 = "\033[0;32m" $6 "\033[0m";
				$7 = "\033[0;32m" $7 "\033[0m";
				$8 = "\033[0;36m" $8 "\033[0m";
				print
			}
		'
	else # Gawk not installed...
		# Show long directory listings with highest compatibility
		\ls -Fls "$@"
	fi
}

# View a comma delimited (.CSV) file
function csvview() {
	cat "${@}" | sed 's/,/ ,/g' | column -t -s, | less -S
}

# Send file(s) to the trash
# Example: trash file1.ext file2.ext
function trash() {
	if [[ -x "$(command -v trash-put)" ]]; then
		trash-put "${@}"
	elif [[ -d $HOME/.local/share/Trash/files ]]; then
		mv "${@}" $HOME/.local/share/Trash/files/
	elif [[ -d $HOME/.local/share/trash/files ]]; then
		mv "${@}" $HOME/.local/share/trash/files/
	elif [[ -d $HOME/.Trash ]]; then
		mv "${@}" $HOME/.Trash/
	elif [[ -d $HOME/.trash ]]; then
		mv "${@}" $HOME/.trash/
	else
		mkdir $HOME/.trash
		mv "${@}" $HOME/.trash/
	fi
}

# Display the contents of the trash
function trashlist() {
	if [[ -x "$(command -v trash-list)" ]]; then
		trash-list
	elif [[ -d $HOME/.local/share/Trash/files ]]; then
		ll $HOME/.local/share/Trash/files/
	elif [[ -d $HOME/.local/share/trash/files ]]; then
		ll "${@}" $HOME/.local/share/trash/files/
	elif [[ -d $HOME/.Trash ]]; then
		ll "${@}" $HOME/.Trash/
	elif [[ -d $HOME/.trash ]]; then
		ll "${@}" $HOME/.trash/
	else
		echo "No trash folder exists."
	fi
}

# Empty and permanently delete all the files in the trash
function trashempty() {
	if [[ -x "$(command -v trash-empty)" ]]; then
		trash-empty
	elif [[ -d $HOME/.local/share/Trash/files ]]; then
		rm -rf ~/.local/share/Trash/files/{..?*,.[!.]*,*} 2>/dev/null
	elif [[ -d $HOME/.local/share/trash/files ]]; then
		rm -rf ~/.local/share/trash/files/{..?*,.[!.]*,*} 2>/dev/null
	elif [[ -d $HOME/.Trash ]]; then
		rm -rf ~/.Trash/{..?*,.[!.]*,*} 2>/dev/null
	elif [[ -d $HOME/.trash ]]; then
		rm -rf ~/.trash/{..?*,.[!.]*,*} 2>/dev/null
	fi
}

# Restore the trash only is trash-cli is installed
# trash-cli - Command Line Interface to FreeDesktop.org Trash
# Link: https://github.com/andreafrancia/trash-cli
if [[ -x "$(command -v restore-trash)" ]]; then
	alias trashrestore='restore-trash'
elif [[ -x "$(command -v trash-restore)" ]]; then
 	alias trashrestore='trash-restore'
fi

# Check the sha256 checksum of a downloaded file using a checksum file like sha256sum.txt
function checksha256() {
	if [[ "$#" -lt 2 ]] || [[ $1 = "--help" ]] || [[ $1 = "-h" ]]; then
		echo -e "\033[1;33mSyntax:\033[0m"
		echo -e "checksha256 \033[0;36m[downloaded file]\033[0m \033[0;36m[checksum file]\033[0m"
		return 1
	fi
	if [[ -x "$(command -v sha256sum)" ]]; then
		if [[ $(sha256sum "${1}" | cut -d' ' -f 1) == $(grep -Po '\b[a-zA-Z0-9]{64}\b' "${2}") ]]; then
			echo -e "\033[0;32mGood"
		else
			echo -e "\033[0;31mBad"
		fi
	else
		echo -e "\033[1;31mError:\033[0m The application sha256sum is not installed."
	fi
}

# Searches for text in all files in the current folder
function findtext() {
	# If The Silver Searcher is installed, use that
	# Link: https://github.com/ggreer/the_silver_searcher
	# Hint: You can use --ignore "dir/or/file"
	if [[ -x "$(command -v ag)" ]]; then
		ag --color --ignore-case --hidden --literal "${@}" 2> /dev/null

	# If ripgrep is installed, use that
	# Link: https://github.com/BurntSushi/ripgrep
	elif [[ -x "$(command -v rg)" ]]; then
		rg --pretty "${@}" | more

	else # Use grep
		# Link: https://www.howtogeek.com/496056/how-to-use-the-grep-command-on-linux/
		# Hint: You can use --exclude='/dir/or/file'
		# -i case-insensitive
		# -I ignore binary files
		# -H causes filename to be printed
		# -r recursive search
		# -n causes line number to be printed
		# optional: -F treat search term as a literal, not a regular expression
		# optional: -l only print filenames and not the matching lines ex. grep -irl "$@" *
		grep -iIHrn --color=always "${@}" . | $PAGER -r
	fi
}

# Searches for text in source code files located in the current path
function findcode() {
	# If The Silver Searcher is installed, use that
	# Link: https://github.com/ggreer/the_silver_searcher
	# Hint: You can use --ignore "dir/or/file"
	if [[ -x "$(command -v ag)" ]]; then
		ag --color --ignore-case --hidden --literal --ignore "*.min.*" --file-search-regex ".*\.(ada|asm|c|cbl|conf|cpp|cpy|cs|css|f|f90|for|go|groovy|h|hpp|htm|html|inc|ini|java|js|json|lib|lua|m|mat|mk|php|pl|py|r|rb|rlib|rs|sc|scala|scss|sh|sql|swift|tcl|template|tpl|ts|vb|vba|vbs|xml|yaml|yml)" "${@}" 2> /dev/null

	# If ripgrep is installed, use that
	# Link: https://github.com/BurntSushi/ripgrep
	elif [[ -x "$(command -v rg)" ]]; then
		rg --pretty "${@}" -g '*.{ada,asm,c,cbl,conf,cpp,cpy,cs,css,f,f90,for,go,groovy,h,hpp,htm,html,inc,ini,java,js,json,lib,lua,m,mat,mk,php,pl,py,r,rb,rlib,rs,sc,scala,scss,sh,sql,swift,tcl,template,tpl,ts,vb,vba,vbs,xml,yaml,yml}' | more

	# Use grep (see findtext function above for options explanation)
	# Hint: You can use --exclude='/dir/or/file'
	else
		grep -iIHrnF --color=always \
			--include=*.ada \
			--include=*.asm \
			--include=*.c \
			--include=*.cbl \
			--include=*.conf \
			--include=*.cpp \
			--include=*.cpy \
			--include=*.cs \
			--include=*.css \
			--include=*.f \
			--include=*.f90 \
			--include=*.for \
			--include=*.go \
			--include=*.groovy \
			--include=*.h \
			--include=*.hpp \
			--include=*.htm \
			--include=*.html \
			--include=*.inc \
			--include=*.ini \
			--include=*.java \
			--include=*.js \
			--include=*.json \
			--include=*.lib \
			--include=*.lua \
			--include=*.m \
			--include=*.mat \
			--include=*.mk \
			--include=*.php \
			--include=*.pl \
			--include=*.py \
			--include=*.r \
			--include=*.rb \
			--include=*.rlib \
			--include=*.rs \
			--include=*.sc \
			--include=*.scala \
			--include=*.scss \
			--include=*.sh \
			--include=*.sql \
			--include=*.swift \
			--include=*.tcl \
			--include=*.template \
			--include=*.tpl \
			--include=*.ts \
			--include=*.vb \
			--include=*.vba \
			--include=*.vbs \
			--include=*.xml \
			--include=*.yaml \
			--include=*.yml \
			--exclude='*.min.*' \
			"${@}" . | $PAGER -r
	fi
}

# Copy file with a progress bar
function cpp() {
	if [[ -x "$(command -v rsync)" ]]; then
		# rsync -avh --progress "${1}" "${2}"
		rsync -ah --info=progress2 "${1}" "${2}"
	else
		set -e
		strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
		| awk '{
		count += $NF
		if (count % 10 == 0) {
			percent = count / total_size * 100
			printf "%3d%% [", percent
			for (i=0;i<=percent;i++)
				printf "="
				printf ">"
				for (i=percent;i<100;i++)
					printf " "
					printf "]\r"
				}
			}
		END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
	fi
}

# Copy and go to the directory
function cpg() {
	if [[ -d "$2" ]];then
		cp "$1" "$2" && cd "$2"
	else
		cp "$1" "$2"
	fi
}

# Move and go to the directory
function mvg() {
	if [[ -d "$2" ]];then
		mv "$1" "$2" && cd "$2"
	else
		mv "$1" "$2"
	fi
}

# Create and go to the directory
function mkdirg() {
	mkdir -p "$@"
	cd "$@"
}

# Repeat a command n times
function repeat() {
	local i max
	max=$1; shift;
	for ((i=1; i <= max ; i++)); do  # --> C-like syntax
		eval "$@";
	done
}

# Goes up a specified number of directories  (i.e. up 4)
function up() {
	local d=""
	limit=$1
	for ((i=1 ; i <= limit ; i++))
		do
			d="$d"/..
		done
	d=$(echo $d | sed 's/^\///')
	if [[ -z "$d" ]]; then
		d=..
	fi
	cd "$d"
}

# Returns the last 2 fields of the working directory
function pwdtail() {
	pwd | awk -F/ '{nlast = NF -1;print $nlast"/"$NF}'
}

if [[ -x "$(command -v openssl)" ]]; then
	## Uses OpenSSL AES 256bit Cipher Block Chaining Encryption to encrypt a file
	function encrypt() {
		if [[ "${#}" -lt 1 ]] || [[ "${1}" = "--help" ]] || [[ "${1}" = "-h" ]]; then
			echo -e "\033[1;33mSyntax:\033[0m"
			echo -e "encrypt \033[0;36m[input_file]\033[0m \033[1;30m(output file will end in .enc)\033[0m"
			echo -e "encrypt \033[0;36m[input_file]\033[0m \033[0;36m[output_file]\033[0m"
			return
		elif [[ ! -r "${1}" ]]; then
			echo -e "\033[1;31mError:\033[0m File ${1} not found"
			return 1
		fi
		if [[ -z "${2}" ]]; then
			local _encrypted_file="${1}.enc"
		else
			local _encrypted_file="${2}"
		fi
		echo "Encrypting ${1}..."
		openssl enc -aes-256-cbc -pbkdf2 -salt -a -in "${1}" -out "${_encrypted_file}" || { echo "Error encrypting file"; return 1; }
		echo -e "\033[1;32mFile ${_encrypted_file} successfully encrypted\033[0m"
	}

	## Uses OpenSSL AES 256bit Cipher Block Chaining Encryption to decrypt a file
	function decrypt() {
		if [[ "${#}" -lt 2 ]] || [[ "${1}" = "--help" ]] || [[ "${1}" = "-h" ]]; then
			echo -e "\033[1;33mSyntax:\033[0m"
			echo -e "decrypt \033[0;36m[encrypted_file]\033[0m \033[0;36m[output_file]\033[0m"
			return
		elif [[ ! -r "${1}" ]]; then
			echo -e "\033[1;31mError:\033[0m File ${1} not found"
			return 1
		fi
		echo "Decrypting ${1}..."
		openssl enc -aes-256-cbc -pbkdf2 -d -a -in "${1}" -out "${2}" || { echo "Error decrypting file"; return 1; }
		echo -e "\033[1;32mFile successfully decrypted\033[0m"
	}
fi

# Print a list of colors
function colors() {
	local fgc bgc vals seq0

	printf "Color escapes are %s\n" '\e[${value};...;${value}m'
	printf "Values 30..37 are \e[33mforeground colors\e[m\n"
	printf "Values 40..47 are \e[43mbackground colors\e[m\n"
	printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

	# foreground colors
	for fgc in {30..37}; do
		# background colors
		for bgc in {40..47}; do
			fgc=${fgc#37} # white
			bgc=${bgc#40} # black

			vals="${fgc:+$fgc;}${bgc}"
			vals=${vals%%;}

			seq0="${vals:+\e[${vals}m}"
			printf "  %-9s" "${seq0:-(default)}"
			printf " ${seq0}TEXT\e[m"
			printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
		done
		echo; echo
	done
}

# Print a list of 256 colors
function colors256() {
	for i in {0..255} ; do
		printf "\x1b[38;5;${i}mcolour${i}\n"
	done
}

# Test for 24bit true color in the terminal
function colors24bit() {
	echo 'If the gradients are smooth, you are displaying 24bit true color.'
	awk 'BEGIN{
		s='1234567890';
		s=s s s s s s s s s s s s s s s s s s s s s s s;
		for (colnum = 0; colnum<256; colnum++) {
			r = 255-(colnum*255/255);
			g = (colnum*510/255);
			b = (colnum*255/255);
			if (g>255) g = 510-g;
			printf "\033[48;2;%d;%d;%dm", r,g,b;
			printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
			printf "%s\033[0m", substr(s,colnum+1,1);
		}
		printf "\n";
	}'
}

# Prints random height bars across the width of the screen
# (great with lolcat application on new terminal windows)
function random_bars() {
	columns=$(tput cols)
	chars=▁▂▃▄▅▆▇█
	for ((i = 1; i <= $columns; i++))
	do
		echo -n "${chars:RANDOM%${#chars}:1}"
	done
	echo
}

# View Apache logs (requires multitail)
function apachelog () {
	if [ -d /var/log/httpd ]; then
		cd /var/log/httpd && ls -Ah && multitail --no-repeat -c -s 2 /var/log/httpd/*_log
	else
		cd /var/log/apache2 && ls -Ah && multitail --no-repeat -c -s 2 /var/log/apache2/*.log
	fi
}

# Auto-find and edit the Apache configuration
function apacheconfig() {
	if [[ -x "$(command -v httpd)" ]] || [[ -x "$(command -v apache2)" ]]; then
		if [[ -f /etc/httpd/conf/httpd.conf ]]; then
			sudoedit /etc/httpd/conf/httpd.conf
		elif [[ -f /etc/httpd/httpd.conf ]]; then
			sudoedit /etc/httpd/httpd.conf
		elif [[ -f /etc/apache2/apache2.conf ]]; then
			sudoedit /etc/apache2/apache2.conf
		elif [[ -f /usr/local/apache2/apache2.conf ]]; then
			sudoedit /usr/local/apache2/apache2.conf
		elif [[ -f /usr/local/etc/httpd/httpd.conf ]]; then
			sudoedit /usr/local/etc/httpd/httpd.conf
		else
			echo "Error: Apache config file could not be found."
			echo "Searching for possible locations:"
			# sudo updatedb && locate httpd.conf && locate apache2.conf
			# apachectl -V
			httpd -V
		fi
	else
		echo "Apache is not installed."
	fi
}

# Find the Apache service and restart/start it
function apacherestart() {
	# If we are using Systemd...
	if [[ -x "$(command -v systemctl)" ]]; then
		if [[ -x "$(command -v httpd)" ]]; then
			sudo systemctl restart httpd
		elif [[ -x "$(command -v apache2)" ]]; then
			sudo systemctl restart apache2
		else
			echo 'Error: Could not find Apache service name'
			return 1
		fi

	# If using init.d...
	elif [[ -x /etc/init.d ]]; then
		if [[ -f /etc/init.d/httpd ]]; then
			sudo /etc/init.d/httpd restart
		elif [[ -f /etc/init.d/apache2 ]]; then
			sudo /etc/init.d/apache2 restart
		else
			echo 'Error: Could not find Apache service name'
			return 1
		fi

	# Other systems including OpenRC...
	elif [[ -x "$(command -v service)" ]]; then
		if [[ -x "$(command -v httpd)" ]]; then
			sudo service httpd restart
		elif [[ -x "$(command -v apache2)" ]]; then
			sudo service apache2 restart
		else
			echo 'Error: Could not find Apache service name'
			return 1
		fi

	else # Unknown
		echo 'Error: Could not find service controller'
		return 1
	fi
}

# Auto-find and edit the PHP configuration file
function phpconfig() {
	if [[ -x "$(command -v php)" ]]; then
		local _php_ini_file=$(php -r 'echo php_ini_loaded_file();')
		if [[ -f "${_php_ini_file}" ]]; then
			sudoedit "${_php_ini_file}"
		elif [[ -f /etc/php.ini ]]; then
			sudoedit /etc/php.ini
		elif [[ -f /etc/php/php.ini ]]; then
			sudoedit /etc/php/php.ini
		else
			echo "Error: php.ini file could not be found automatically."
			echo "Searching for possible locations:"
			# sudo updatedb && locate php.ini
			php --ini
		fi
	else
		echo "PHP is not installed."
	fi
}

# Auto-find and edit the MySQL configuration file
function mysqlconfig() {
	if [[ -x "$(command -v mysqld)" ]]; then
		if [[ -f /etc/my.cnf ]]; then
			sudoedit /etc/my.cnf
		elif [[ -f /etc/mysql/my.cnf ]]; then
			sudoedit /etc/mysql/my.cnf
		elif [[ -f /usr/local/etc/my.cnf ]]; then
			sudoedit /usr/local/etc/my.cnf
		elif [[ -f /usr/bin/mysql/my.cnf ]]; then
			sudoedit /usr/bin/mysql/my.cnf
		elif [[ -f "$HOME/my.cnf" ]]; then
			sudoedit "$HOME/my.cnf"
		else
			echo "Error: my.cnf file could not be found automatically."
			echo "Searching for possible locations:"
			# sudo updatedb && locate my.cnf
			mysqld --verbose --help | grep -A 1 "Default options"
		fi
	else
		echo "MySQL is not installed."
	fi
}

# Finds the current Linux distribution, name, version, and kernel version
function ver() {
	if [[ -x "$(command -v uname)" ]]; then
		uname --kernel-name --kernel-release --machine && echo
	fi
	if [[ -x "$(command -v hostnamectl)" ]]; then
		hostnamectl && echo
	fi
	if [[ -x "$(command -v lsb_release)" ]]; then
		lsb_release -a && echo
	fi
	cat /etc/*-release 2> /dev/null
}

# Confirm/Ask a question - See 'killps' for example of use
# General-purpose function to ask Yes/No questions in Bash,
# either with or without a default answer.
# It keeps repeating the question until it gets a valid answer.
# Link: https://gist.github.com/davejamesmiller/1965569
# Example Usage:
#   if ask "Do you want to do such-and-such?"; then
# Default to Yes if the user presses enter without giving an answer:
#   if ask "Do you want to do such-and-such?" Y; then
# Default to No if the user presses enter without giving an answer:
#   if ask "Do you want to do such-and-such?" N; then
# Or if you prefer the shorter version:
#   ask "Do you want to do such-and-such?" && said_yes
#   ask "Do you want to do such-and-such?" || said_no
function ask() {
	local prompt default reply

	if [[ ${2:-} = 'Y' ]]; then
		prompt='Y/n'
		default='Y'
	elif [[ ${2:-} = 'N' ]]; then
		prompt='y/N'
		default='N'
	else
		prompt='y/n'
		default=''
	fi

	while true; do
		# Ask the question (not using "read -p" as it uses stderr not stdout)
		echo -ne "$1 [$prompt] "

		# Read the answer (use /dev/tty in case stdin is redirected from somewhere else)
		read -r reply </dev/tty

		# Default?
		if [[ -z $reply ]]; then
			reply=$default
		fi

		# Check if the reply is valid
		case "$reply" in
			Y*|y*) return 0 ;;
			N*|n*) return 1 ;;
		esac
	done
}

# A full chmod calculator on command line (type chmodcalc for usage and examples)
function chmodcalc() {
	# Define colors
	local BLUE="\033[0;34m"
	local CYAN="\033[0;36m"
	local GREEN="\033[0;32m"
	local MAGENTA="\033[0;35m"
	local RED="\033[0;31m"
	local YELLOW="\033[0;33m"
	local ERROR="\033[1;31m"
	local NOCOLOR="\033[0m"

	# Define local variables
	local text=""
	local output=""
	local example=""
	local i=0
	local n=0
	local formatted=""

	if [ "$#" -eq 1 ]; then
		if [ "${#1}" -ge 4 ]; then
			echo -e "${RED}Error: Invalid octal.${NOCOLOR}";
			return 128;
		fi
		text="$1"
		output=""
		example=""
		i=0
		while (( i++ < ${#text} ))
		do
			char=$(expr substr "${text}" "${i}" 1)
			case $char in
			0)
				part[${i}]="---"
				;;
			1)
				part[${i}]="--x"
				;;
			2)
				part[${i}]="-w-"
				;;
			3)
				part[${i}]="-wx"
				;;
			4)
				part[${i}]="r--"
				;;
			5)
				part[${i}]="r-x"
				;;
			6)
				part[${i}]="rw-"
				;;
			7)
				part[${i}]="rwx"
				;;
			*)
				part[${i}]="Error: Invalid octal."
				break
				;;
			esac
			example[${i}]="${part[${i}]//-}"
		done
		echo -e "${GREEN}${part[1]}${NOCOLOR} ${YELLOW}${part[2]}${NOCOLOR} ${RED}${part[3]}${NOCOLOR}"
		echo ""
		echo "Examples:"
		echo -e "${CYAN}chmod${NOCOLOR} ${CYAN}-R${NOCOLOR} ${MAGENTA}${text}${NOCOLOR} ${BLUE}./*${NOCOLOR}"
		echo -e "${CYAN}chmod${NOCOLOR} ${CYAN}-R${NOCOLOR} ${CYAN}u=${GREEN}${example[1]}${NOCOLOR}${CYAN},g=${YELLOW}${example[2]}${NOCOLOR}${CYAN},o=${RED}${example[3]}${NOCOLOR} ${BLUE}./*${NOCOLOR}"
		echo ""
	elif [ "$#" -eq 3 ]; then
		formatted=""
		for p
		do
			n=0
			[[ $p =~ .*r.* ]] && (( n+=4 ))
			[[ $p =~ .*w.* ]] && (( n+=2 ))
			[[ $p =~ .*x.* ]] && (( n+=1 ))
			formatted=${formatted}$(printf "${n}")
			# printf $n
		done
		echo -e "${CYAN}${formatted}${NOCOLOR}"
		chmodcalc "${formatted}"
	else
		echo -e "${ERROR}Error: 1 or 3 parameters required.${NOCOLOR}"
		echo ""
		echo -e "Syntax: ${CYAN}chmodcalc${NOCOLOR} ${GREEN}[owner]${NOCOLOR} ${YELLOW}[group]${NOCOLOR} ${RED}[other]${NOCOLOR}"
		echo -e "Example: ${GREEN}chmodcalc${NOCOLOR} ${GREEN}rwx${NOCOLOR} ${YELLOW}rw${NOCOLOR} ${RED}r${NOCOLOR}"
		echo ""
		echo -e "Syntax: ${CYAN}chmodcalc [octal]${NOCOLOR}"
		echo -e "Example: ${GREEN}chmodcalc 777${NOCOLOR}"
		echo ""
		echo -e "You can also use symbols instead of numeric values with chmod"
		echo -e "${BLUE}chmod u=rwx,g=rw,o=r filename.ext${NOCOLOR}"
		echo ""
		echo -e "To calculate octals: ${BLUE}read${NOCOLOR} is ${CYAN}4${NOCOLOR}, ${BLUE}write${NOCOLOR} is ${CYAN}2${NOCOLOR}, and ${BLUE}execute${NOCOLOR} is ${CYAN}1${NOCOLOR}"
		echo ""
	fi
}

# Function to recursively set permissions for only files
function chmodfiles() {
	# If the second parameter is not passed, set to the current working directory using $PWD
	local _directory="${2:-${PWD}}"
	local _permission="$1"

	# Exit if the directory does not exist
	if [ -z "$_permission" ]; then
		echo "Sets permissions for files recursively"
		echo "Syntax:";
		echo "  chmodfiles [mode] [optional folder]";
		echo "Example:";
		echo "  chmodfiles 664";
		echo "  chmodfiles +x /some/path";
		return 1;
	fi

	# Exit if the directory does not exist
	if [ ! -d "$_directory" ]; then
		echo "Error: Directory $_directory not found.";
		return 2;
	fi

	# Get confirmation
	echo "This will recursively change all permissions to $_permission for the files in the directory:"
	echo "$_directory"

	if ask "Are you sure?" N; then
		find "$_directory" -type f -exec chmod $_permission {} \;
		echo "Done."
	fi
}

# Function to recursively set permissions for only directories
alias chmodfolders='chmoddirs'
function chmoddirs() {
	# If the second parameter is not passed, set to the current working directory using $PWD
	local _directory="${2:-${PWD}}"
	local _permission="$1"

	# Exit if the directory does not exist
	if [ -z "$_permission" ]; then
		echo "Sets permissions for directories recursively"
		echo "Syntax:";
		echo "  chmoddirs [mode] [optional folder]";
		echo "Example:";
		echo "  chmoddirs 775";
		echo "  chmoddirs +x /some/path";
		return 1;
	fi

	# Exit if the directory does not exist
	if [ ! -d "$_directory" ]; then
		echo "Error: Directory $_directory not found.";
		return 2;
	fi

	# Get confirmation
	echo "This will recursively change all permissions to $_permission for the directories:"
	echo "$_directory"

	if ask "Are you sure?" N; then
		find "$_directory" -type d -name \* -exec chmod $_permission {} \;
		echo "Done."
	fi
}

# Recursively set permissions of code files and directories
# WARNING: Will remove executable permissions on script files
function chfix() {
	# Directory and file permissions
	local _dir_permissions="0775"  # rwx rwx rx
	local _file_permissions="0664" # rw  rw  r

	# Permissions for user and group
	#local _user="www-data"
	#local _group="www-data"

	## If $1 is not passed, set to the current working dir using $PWD
	local _directory="${1:-${PWD}}"

	## Exit if the directory does not exist
	if [ ! -d "$_directory" ]; then
		echo "Error: Directory $_directory not found.";
		return 1;
	fi

	## Make sure we are not inside a protected folder
	if [[ "$_directory" = "/" ||
		"$_directory" = "/root" ||
		"$_directory" = "/bin" ||
		"$_directory" = "/boot" ||
		"$_directory" = "/etc" ||
		"$_directory" = "/home" ||
		"$_directory" = "/lib" ||
		"$_directory" = "/lib64" ||
		"$_directory" = "/mnt" ||
		"$_directory" = "/opt" ||
		"$_directory" = "/proc" ||
		"$_directory" = "/sbin" ||
		"$_directory" = "/usr/bin" ||
		"$_directory" = "/usr/lib" ||
		"$_directory" = "/usr/lib64" ||
		"$_directory" = "/usr/sbin" ||
		"$_directory" = "/srv" ||
		"$_directory" = "/usr" ||
		"$_directory" = "/var" ||
		"$_directory" = "/var/www" ]]; then
		echo "Error: Cannot change $_dir because it is a protected directory.";
		return 2;
	fi

	## Get confirmation
	echo "This will change all permissions for the webserver directories and files and change ownership in:"
	echo "$_directory"

	if ask "Are you sure?" N; then
		#sudo chown -R ${_user}:${_group} "$_directory"
		sudo find "$_directory" -type f -exec chmod $_file_permissions {} \;
		sudo find "$_directory" -type d -name \* -exec chmod $_dir_permissions {} \;
		echo "Done."
	fi
}

# Alias to copy/clone file permissions
function chmodcopy() {
	if [ $# -lt 2 ]; then
	    echo "Usage: chmodcopy [source_file] [destination_file]"
	    return 1
	fi
	chmod --reference="${@}"
}

# Fixes permissions in a user's home folder
# If no user is specified, the current user is selected
function fixuserhome() {
	# If no parameter was specified...
	if [[ -z "${@}" ]]; then
		# Use the current user
		local _username="$(whoami)"
	else
		# Use the passed in parameter
		local _username="${@}"
	fi

	# If the home folder doesn't exist...
	if [ ! -d "/home/${_username}" ]; then
		echo "Error: User ${_username} does not have a home folder."
		return 1
	fi

	# Set the hourglass and checkmark characters
	local hourglass="\033[0;33m⌛\033[0m"
	local checkmark="\r\033[1;32m✓\033[0m"

	# Confirm
	if ask "\033[1;31mWARNING:\033[0m Change all permissions for user \033[0;36m${_username}\033[0m's home folder?" N; then
		sudo true # Prompt now instead of later and mess up the progress display

		if ask "Reset group ownership permissions to \033[0;36m${_username}\033[0m?" Y; then
			echo -ne "${hourglass} Set the owner and group as ${_username}"
			sudo chown -R ${_username}:${_username} /home/${_username}
		else
			echo -ne "${hourglass} Set the owner as ${_username}"
			sudo chown -R ${_username} /home/${_username}
		fi
		echo -e "${checkmark}"

		echo -ne "${hourglass} Make sure we have read and write access to all files"
		chmod -R u+rw /home/${_username}
		echo -e "${checkmark}"

		echo -ne "${hourglass} Remove write access from group"
		chmod -R g-w /home/${_username}
		echo -e "${checkmark}"

		echo -ne "${hourglass} Remove all access from others"
		chmod -R o-rwx /home/${_username}
		echo -e "${checkmark}"

		echo -ne "${hourglass} Make .sh shell script files executable"
		#chmod ug+x /home/${_username}/{.,}*.sh # Only in the home folder root
		find /home/${_username} -type f \( -name "*.sh" -o -name ".*.sh" \) -exec chmod ug+x {} \;
		echo -e "${checkmark}"

		echo -ne "${hourglass} Make sure all directories have execute permissions"
		# The X (capital X, NOT small x) is ignored for files but is used for directories
		chmod -R ug+X /home/${_username}
		echo -e "${checkmark}"

		echo -ne "${hourglass} Remove group permissions for directories without group read"
		find /home/${_username} -type d ! -perm -g+r -execdir chmod g-wx {} \;
		echo -e "${checkmark}"

		# If there is a ~/.local/share/kwalletd directory...
		if [[ -d "/home/${_username}/.local/share/kwalletd" ]]; then
			echo -ne "${hourglass} User only access to KDE Wallet keyring"
			chmod -R go-rwx /home/${_username}/.local/share/kwalletd
			echo -e "${checkmark}"
		fi

		# If there is a ~/.local/share/keyrings directory...
		if [[ -d "/home/${_username}/.local/share/keyrings" ]]; then
			echo -ne "${hourglass} User only access to GNOME keyring"
			chmod -R go-rwx /home/${_username}/.local/share/keyrings
			echo -e "${checkmark}"
		fi

		# If there is an .ssh directory...
		if [[ -d "/home/${_username}/.ssh" ]]; then
			echo -ne "${hourglass} User only access to .ssh and private keys"
			chmod -R go-rwx /home/${_username}/.ssh
			echo -e "${checkmark}"
		fi

		# If there is a .putty directory...
		if [[ -d "/home/${_username}/.putty" ]]; then
			echo -ne "${hourglass} User only access to .putty and ssh keys"
			chmod -R go-rwx /home/${_username}/.putty
			echo -e "${checkmark}"
		fi

		# If there is a .pki directory...
		if [[ -d "/home/${_username}/.pki" ]]; then
			echo -ne "${hourglass} User only access to .pki keys and certificates"
			chmod -R go-rwx /home/${_username}/.pki
			echo -e "${checkmark}"
		fi

		# If there is a .gnupg directory...
		if [[ -d "/home/${_username}/.gnupg" ]]; then
			echo -ne "${hourglass} User only access to .gnupg and private keys"
			chmod -R go-rwx /home/${_username}/.gnupg
			echo -e "${checkmark}"
		fi

		# If KeePassXC/KeePass/KeeWeb is installed...
		if [[ -x "$(command -v keepassxc)" ]] || [[ -x "$(command -v keepass)" ]] || [[ -x "$(command -v keeweb)" ]]; then
			echo -ne "${hourglass} User only access to KeePassXC/KeePass/KeeWeb .kdbx files"
			find /home/${_username} -type f \( -name "*.kdbx" -o -name ".*.kdbx" \) -exec chmod go-rwx {} \;
			echo -e "${checkmark}"
		fi

		# If there is a pass directory...
		if [[ -d "/home/${_username}/.password-store" ]]; then
			echo -ne "${hourglass} User only access to pass data"
			chmod -R go-rwx /home/${_username}/.password-store
			echo -e "${checkmark}"
		fi

		# If there is a Bitwarden directory...
		if [[ -d "/home/${_username}/.config/Bitwarden" ]]; then
			echo -ne "${hourglass} User only access to Bitwarden data"
			chmod -R go-rwx /home/${_username}/.config/Bitwarden
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/com.bitwarden.desktop" ]]; then
			echo -ne "${hourglass} User only access to Bitwarden data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/com.bitwarden.desktop
			echo -e "${checkmark}"
		fi

		# Check for Tor settings
		if [[ -d "/home/${_username}/.local/share/torbrowser" ]]; then
			echo -ne "${hourglass} User only access to Tor browser data"
			chmod -R go-rwx /home/${_username}/.local/share/torbrowser
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/com.github.micahflee.torbrowser-launcher" ]]; then
			echo -ne "${hourglass} User only access to Tor browser data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/com.github.micahflee.torbrowser-launcher
			echo -e "${checkmark}"
		fi

		# Check for Brave settings
		if [[ -d "/home/${_username}/.config/BraveSoftware" ]]; then
			echo -ne "${hourglass} User only access to Brave browser data"
			chmod -R go-rwx /home/${_username}/.config/BraveSoftware
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/com.brave.Browser" ]]; then
			echo -ne "${hourglass} User only access to Brave browser data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/com.brave.Browser
			echo -e "${checkmark}"
		fi

		# Check for Chrome settings
		if [[ -d "/home/${_username}/.config/google-chrome" ]]; then
			echo -ne "${hourglass} User only access to Chrome browser data"
			chmod -R go-rwx /home/${_username}/.config/google-chrome
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/com.google.Chrome" ]]; then
			echo -ne "${hourglass} User only access to Chrome browser data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/com.google.Chrome
			echo -e "${checkmark}"
		fi

		# Check for Chromium settings
		if [[ -d "/home/${_username}/.config/chromium" ]]; then
			echo -ne "${hourglass} User only access to Chromium browser data"
			chmod -R go-rwx /home/${_username}/.config/chromium
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/org.chromium.Chromium" ]]; then
			echo -ne "${hourglass} User only access to Chromium browser data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/org.chromium.Chromium
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/net.sourceforge.chromium-bsu" ]]; then
			echo -ne "${hourglass} User only access to Ungoogled Chromium browser data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/net.sourceforge.chromium-bsu
			echo -e "${checkmark}"
		fi

		# Check for Firefox settings
		if [[ -d "/home/${_username}/.mozilla" ]]; then
			echo -ne "${hourglass} User only access to Firefox browser data"
			chmod -R go-rwx /home/${_username}/.mozilla
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/org.mozilla.firefox" ]]; then
			echo -ne "${hourglass} User only access to Firefox browser data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/org.mozilla.firefox
			echo -e "${checkmark}"
		fi

		# Check for LibreWolf settings
		if [[ -d "/home/${_username}/.librewolf" ]]; then
			echo -ne "${hourglass} User only access to LibreWolf browser data"
			chmod -R go-rwx /home/${_username}/.librewolf
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/io.gitlab.librewolf-community" ]]; then
			echo -ne "${hourglass} User only access to LibreWolf browser data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/io.gitlab.librewolf-community
			echo -e "${checkmark}"
		fi

		# Check for Opera settings
		if [[ -d "/home/${_username}/.config/opera" ]]; then
			echo -ne "${hourglass} User only access to Opera browser data"
			chmod -R go-rwx /home/${_username}/.config/opera
			echo -e "${checkmark}"
		fi

		# Check for Vivaldi settings
		if [[ -d "/home/${_username}/.config/vivaldi" ]]; then
			echo -ne "${hourglass} User only access to Vivaldi browser data"
			chmod -R go-rwx /home/${_username}/.config/vivaldi
			echo -e "${checkmark}"
		fi

		# Check for Evolution settings
		if [[ -d "/home/${_username}/.config/evolution" ]]; then
			echo -ne "${hourglass} User only access to Evolution email data"
			chmod -R go-rwx /home/${_username}/.config/evolution
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/org.gnome.Evolution" ]]; then
			echo -ne "${hourglass} User only access to Evolution email data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/org.gnome.Evolution
			echo -e "${checkmark}"
		fi

		# Check for Geary settings
		if [[ -d "/home/${_username}/.local/share/geary" ]]; then
			echo -ne "${hourglass} User only access to Geary email data"
			chmod -R go-rwx /home/${_username}/.local/share/geary
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/org.gnome.Geary" ]]; then
			echo -ne "${hourglass} User only access to Geary email data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/org.gnome.Geary
			echo -e "${checkmark}"
		fi

		# Check for Thunderbird settings
		if [[ -d "/home/${_username}/.thunderbird" ]]; then
			echo -ne "${hourglass} User only access to Thunderbird email data"
			chmod -R go-rwx /home/${_username}/.thunderbird
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/org.mozilla.Thunderbird" ]]; then
			echo -ne "${hourglass} User only access to Thunderbird email data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/org.mozilla.Thunderbird
			echo -e "${checkmark}"
		fi

		# Check for Element settings
		if [[ -d "/home/${_username}/.config/Element" ]]; then
			echo -ne "${hourglass} User only access to Element chat data"
			chmod -R go-rwx /home/${_username}/.config/Element
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/im.riot.Riot" ]]; then
			echo -ne "${hourglass} User only access to Element chat data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/im.riot.Riot
			echo -e "${checkmark}"
		fi

		# Check for Signal settings
		if [[ -d "/home/${_username}/.config/Signal" ]]; then
			echo -ne "${hourglass} User only access to Signal chat data"
			chmod -R go-rwx /home/${_username}/.config/Signal
			echo -e "${checkmark}"
		fi
		if [[ -d "/home/${_username}/.var/app/org.signal.Signal" ]]; then
			echo -ne "${hourglass} User only access to Signal chat data (Flatpak)"
			chmod -R go-rwx /home/${_username}/.var/app/org.signal.Signal
			echo -e "${checkmark}"
		fi

		if [[ -f "/home/${_username}/.config/birthdays.csv" ]]; then
			echo -ne "${hourglass} User only access to birthday/anniversary reminder data"
			chmod 600 /home/${_username}/.config/birthdays.csv
			echo -e "${checkmark}"
		elif [[ -f "${_BDAY_FILE}" ]]; then
			echo -ne "${hourglass} User only access to birthday/anniversary reminder data"
			chmod 600 "${_BDAY_FILE}"
			echo -e "${checkmark}"
		fi

		# [OPTIONAL] Copy group permissions to other
		#echo -ne "${hourglass} Copy group permissions to other"
		#chmod -R o=g /home/${_username}
		#echo -e "${checkmark}"

		# [OPTIONAL] Copy user permissions to group
		#echo -ne "${hourglass} Copy user permissions to group"
		#chmod -R g=u /home/${_username}
		#echo -e "${checkmark}"

		# Set the setgid bit, so that files/folder under the directory
		# will be created with the same group as <directory>
		echo -ne "${hourglass} Set the setgid bit to inherit folder permissions"
		chmod g+s /home/${_username}
		echo -e "${checkmark}"

		# If Access Control Lists (ACL) is installed...
		# To "activate" ACL, you have to remount the drive with the "acl" option
		# NOTE: Btrfs and Xfs filesystem use the ACL mount option by default
		# Example /etc/fstab Entry:
		# UUID=abc123def456 / ext4 defaults,acl 0 1
		# Type "man acl" for more information
		if [[ -x "$(command -v setfacl)" ]]; then
			# Use getfacl [directory] to check ACL for these directories
			echo -ne "${hourglass} Modify default ACL entries"
			setfacl -d -m u::rwx /home/${_username}
			setfacl -d -m g::rx /home/${_username}
			setfacl -d -m o::X /home/${_username}
			echo -e "${checkmark}"
		fi

		echo "Done!"
	else
		return 0
	fi
}

# Copy over configuration settings from one account to root/default/another
function configcopy() {
	if [ -z "${1}" ] || [ -z "${2}" ]; then
		echo -e "Usage: \033[1;32mcopyconfig [from_user] [to_user]\033[0m"
		echo -ne "Users can be \033[1;36mroot\033[0m, \033[1;36mdefault\033[0m (/etc/skel), or users \033[1;36m"
		cut -d: -f1,3 /etc/passwd | egrep ':[0-9]{4}$' | cut -d: -f1 | tr '\n' ' ' | tr -d '[:space:]'
		echo -e "\033[0m."
		return
	elif [ "${1}" == "${2}" ]; then
		echo -e "\033[1;31mError:\033[0m The from and to user parameters cannot be the same."
		return 2
	elif [ ! -d "/home/${1}" ] && [ "${1}" != "root" ] && [ "${1}" != "default" ]; then
		echo -e "\033[1;31mError:\033[0m User ${1} does not exist."
		return 1
	elif [ ! -d "/home/${2}" ] && [ "${2}" != "root" ] && [ "${2}" != "default" ]; then
		echo -e "\033[1;31mError:\033[0m User ${2} does not exist."
		return 1
	elif [ "${1}" == "default" ] && [ "${2}" == "root" ]; then
		dirfrom=/etc/skel/
		dirto=/root/
		owner=root
	elif [ "${1}" == "default" ]; then
		dirfrom=/etc/skel/
		dirto=/home/"${2}"/
		owner="${2}"
	elif [ "${2}" == "default" ] && [ "${1}" == "root" ]; then
		dirfrom=/root/
		dirto=/etc/skel/
		owner=root
	elif [ "${2}" == "default" ]; then
		dirfrom=/home/"${1}"/
		dirto=/etc/skel/
		owner=root
	elif [ "${1}" == "root" ]; then
		dirfrom=/root/
		dirto=/home/"${2}"/
		owner="${2}"
	elif [ "${2}" == "root" ]; then
		dirfrom=/home/"${1}"/
		dirto=/root/
		owner=root
	else
		dirfrom=/home/"${1}"/
		dirto=/home/"${2}"/
		owner="${2}"
	fi

	# Ask for confirmation
	if ! ask "Are you sure? This will overwrite configuration files in ${dirto%/}" N; then
		return
	fi

	# Add any additional files here
	declare -a files
	[ -f "${dirfrom}.bash_logout" ]  && files+=(".bash_logout")
	[ -f "${dirfrom}.bash_profile" ] && files+=(".bash_profile")
	[ -f "${dirfrom}.bashrc" ]       && files+=(".bashrc")
	[ -f "${dirfrom}.bashrc_help" ]  && files+=(".bashrc_help")
	[ -f "${dirfrom}.inputrc" ]      && files+=(".inputrc")
	[ -f "${dirfrom}.nanorc" ]       && files+=(".nanorc")
	[ -f "${dirfrom}.p10k.zsh" ]     && files+=(".p10k.zsh")
	[ -f "${dirfrom}.screenrc" ]     && files+=(".screenrc")
	[ -f "${dirfrom}.vimrc" ]        && files+=(".vimrc")
	[ -f "${dirfrom}.Xauthority" ]   && files+=(".Xauthority")
	[ -f "${dirfrom}.zshrc" ]        && files+=(".zshrc")

	# Loop through and copy the files over
	for file in "${files[@]}"; do
		sudo \cp "${dirfrom}""${file}" "${dirto}" 2>/dev/null || :
		sudo chown "${owner}":"${owner}" "${dirto}""${file}"
		echo -e "\033[1;32m✓\033[0m Copied file: \033[1;36m${file}\033[0m"
	done

	# Copy other Extreme Ultimate bashrc settings
	if [[ -d "${dirfrom}".config/bashrc ]]; then
		sudo mkdir -p ${dirto}.config
		sudo \cp -R "${dirfrom}".config/bashrc "${dirto}".config/ 2>/dev/null
		echo -e "\033[1;32m✓\033[0m Copied files: \033[1;36mBashrc Config\033[0m"
	fi

	# Fish
	if [[ -d "${dirfrom}".config/fish ]]; then
		sudo mkdir -p ${dirto}.config
		sudo \cp -R "${dirfrom}".config/fish "${dirto}".config/ 2>/dev/null
		echo -e "\033[1;32m✓\033[0m Copied files: \033[1;36mFish\033[0m"
	fi

	# Micro (skip backups and buffers directories)
	if [[ -f "${dirfrom}".config/micro/settings.json ]]; then
		sudo mkdir -p ${dirto}.config/micro
		sudo \cp "${dirfrom}".config/micro/settings.json "${dirto}".config/micro/settings.json 2>/dev/null
		sudo \cp "${dirfrom}".config/micro/bindings.json "${dirto}".config/micro/bindings.json 2>/dev/null
		sudo \cp -R "${dirfrom}".config/micro/plug "${dirto}".config/micro/ 2>/dev/null
		echo -e "\033[1;32m✓\033[0m Copied files: \033[1;36mMicro\033[0m"
	fi

	# Tmux
	sudo \cp -R "${dirfrom}".tmux* "${dirto}" 2>/dev/null
	if [[ -e "${dirto}".tmux.conf ]]; then
		sudo chown "${owner}":"${owner}" "${dirto}".tmux.conf
		echo -e "\033[1;32m✓\033[0m Copied files: \033[1;36mTmux\033[0m"
	fi
	if [[ -d "${dirto}".tmux ]]; then
		sudo chown -R "${owner}":"${owner}" "${dirto}".tmux
	fi

	# We are done
	echo -e "Owner set to: \033[1;35m${owner}\033[0m"
	echo -e "\033[1;33mFinished\033[0m copying configuation files from \033[1;34m${dirfrom%/}\033[0m to \033[1;34m${dirto%/}\033[0m"
	return
}

# Search process names to kill
# https://unix.stackexchange.com/questions/443472/alias-for-killing-all-processes-of-a-grep-hit
function smash () {
	local T_PROC=$1
	local T_PIDS=($(pgrep -i "$T_PROC"))
	if [[ "${#T_PIDS[@]}" -ge 1 ]]; then
		echo "Found the following processes:"
		for pid in "${T_PIDS[@]}"; do
			echo "$pid" "$(\ps -p "$pid" -o comm= | awk -F'/' '{print $NF}')" | column -t
		done
		if ask "Kill them?" N; then
			for pid in "${T_PIDS[@]}"; do
				echo "Killing ${pid}..."
				( kill -15 "$pid" ) && continue
				sleep 2
				( kill -2 "$pid" ) && continue
				sleep 2
				( kill -1 "$pid" ) && continue
				echo "Cannot terminate" >&2 && return 1
			done
		else
			echo "Exiting..."
			return 0
		fi
	else
		echo "No processes found for: $1" >&2 && return 1
	fi
}

# For some reason, rot13 pops up everywhere
function rot13() {
	if [[ $# -eq 0 ]]; then
		tr '[a-m][n-z][A-M][N-Z]' '[n-z][a-m][N-Z][A-M]'
	else
		echo $* | tr '[a-m][n-z][A-M][N-Z]' '[n-z][a-m][N-Z][A-M]'
	fi
}

# Trim leading and trailing spaces
function trim() {
	local var=$@
	var="${var#"${var%%[![:space:]]*}"}"  # remove leading whitespace characters
	var="${var%"${var##*[![:space:]]}"}"  # remove trailing whitespace characters
	echo -n "$var"
}

#######################################################
# Show the initial information HUD on initial Bash load
# Link: https://github.com/LinusDierheimer/fastfetch
# Link: https://ostechnix.com/neofetch-display-linux-systems-information/
# Link: https://github.com/KittyKatt/screenFetch
# Link: https://github.com/deater/linux_logo
# Link: https://github.com/dylanaraps/pfetch
#######################################################

# If we are NOT root or in a virtual terminal console or TMUX or Git Bash...
if [[ $EUID -ne 0 ]] && \
	[[ ! "$(tty)" =~ /dev/tty ]] && \
	[[ ! "$TERM" =~ screen ]] && \
	[[ -z "$TMUX" ]] && \
	[[ "$_KERNEL_NAME" != "MINGW" ]] && \
	[[ "$_KERNEL_NAME" != "CYGWI" ]] && \
	[[ $_SKIP_SYSTEM_INFO = false ]]; then

	if [[ -x "$(command -v fastfetch)" ]]; then
		fastfetch
	elif [[ -x "$(command -v neofetch)" ]]; then
		neofetch
		printf '\e[A\e[K' # Move the cursor up one line
	elif [[ -x "$(command -v screenfetch)" ]]; then
		screenfetch
	elif [[ -x "$(command -v linuxlogo)" ]]; then
		linuxlogo
	elif [[ -x "$(command -v archey)" ]]; then
		archey
	elif [[ -f "$HOME/pfetch.sh" ]]; then
		"$HOME/pfetch.sh"
	fi
fi

#######################################################
# Show text or ASCII on initial Bash load
# Create ASCII: jp2a --color ~/input_image.jpg > ~/.bash_motd_shown
# Test: cat ~/.bash_motd_shown
#######################################################

# If the file exists and we are NOT root...
if [[ -f "$HOME/.bash_motd_shown" ]] && [[ $EUID -ne 0 ]]; then

	# Show the ASCII text or image
	cat "$HOME/.bash_motd_shown"
fi

#######################################################
# Show upgrade information on new terminal windows
# Note: This is disabled by default because it takes serveral seconds to run
#######################################################

if [[ $_SKIP_UPGRADE_NOTIFY = false ]]; then

	# If this is an Arch based distrobution...
	# Add to your crontab (this runs every 3 hours): 0 */3 * * * /usr/bin/pacman -Sy
	if [[ -x "$(command -v pacman)" ]] && [[ -x "$(command -v paccache)" ]]; then

		# Show if there are updates available
		_PACKAGE_UPDATE_COUNT=$(pacman -Q --upgrades | wc -l)
		if [[ "$_PACKAGE_UPDATE_COUNT" -gt "0" ]]; then
			echo -e "\033[1;33m*\033[0m \033[0;32mThere are\033[0m \033[1;37m"$_PACKAGE_UPDATE_COUNT"\033[0m \033[0;32mavaliable program updates\033[0m"
			echo -e "\033[1;30m*\033[0m \033[0;36mType\033[0m \033[1;35mpacman -Qu\033[0m \033[0;36mfor more information\033[0m"
			echo
		fi

	# If this is an Ubuntu based distro...
	# Add to your crontab (this runs every 3 hours): 0 */3 * * * /usr/bin/apt update
	elif [[ -x "/usr/lib/update-notifier/apt-check" ]]; then

		# Show if there are updates available
		IFS=';' read _PACKAGE_UPDATE_COUNT _PACKAGE_SECURITY_UPDATE_COUNT < <(/usr/lib/update-notifier/apt-check 2>&1)
		if [[ "$_PACKAGE_UPDATE_COUNT" -gt "0" ]]; then
			echo -e "\033[1;33m*\033[0m \033[0;32mThere are\033[0m \033[1;37m"$_PACKAGE_UPDATE_COUNT"\033[0m \033[0;32mavaliable program updates\033[0m"
		fi
		if [[ "$_PACKAGE_SECURITY_UPDATE_COUNT" -gt "0" ]]; then
			echo -e "\033[1;30m*\033[0m \033[0;36mThere are\033[0m \033[1;35m"$_PACKAGE_SECURITY_UPDATE_COUNT"\033[0m \033[0;36msecurity updates.\033[0m"
		fi
		if [[ "$_PACKAGE_UPDATE_COUNT" -gt "0" ]] || [[ "$_PACKAGE_SECURITY_UPDATE_COUNT" -gt "0" ]]; then
			echo
		fi
	fi
fi

#######################################################
# bashmarks Directory Bookmarks
# Link: https://github.com/huyng/bashmarks
# Install: git clone git://github.com/huyng/bashmarks.git
# s <bookmark_name> - Saves the current directory as "bookmark_name"
# g <bookmark_name> - Goes (cd) to the directory associated with "bookmark_name"
# p <bookmark_name> - Prints the directory associated with "bookmark_name"
# d <bookmark_name> - Deletes the bookmark
# l                 - Lists all available bookmarks
#######################################################

# If bashmarks is installed, load it
if [[ -f "$HOME/bashmarks/bashmarks.sh" ]]; then
	source "$HOME/bashmarks/bashmarks.sh"
elif [[ -f "$HOME/.local/bin/bashmarks.sh" ]]; then
	source "$HOME/.local/bin/bashmarks.sh"
elif [[ -f /usr/share/bashmarks/bashmarks.sh ]]; then
	source /usr/share/bashmarks/bashmarks.sh
fi

#######################################################
# Zoxide is a smarter cd command (inspired by z and autojump)
# Link: https://github.com/ajeetdsouza/zoxide
# Install: curl -sS https://webinstall.dev/zoxide | bash
#######################################################

if [[ -x "$(command -v zoxide)" ]]; then
	eval "$(zoxide init bash)"
fi

#######################################################
# commacd Improved cd
# Link: https://github.com/shyiko/commacd
# Install: curl -sSL https://github.com/shyiko/commacd/raw/v1.0.0/commacd.sh -o ~/.commacd.sh
#######################################################

# If commacd is installed
if [[ -f "$HOME/.commacd.sh" ]]; then
	source "$HOME/.commacd.sh"
elif [[ -f /usr/share/commacd/commacd.bash ]]; then
	source /usr/share/commacd/commacd.bash
fi

#######################################################
# Improve navigation and searching your command history
#######################################################

# HSTR Easily navigate and search your command history and favorites
# (has favorites, syncs across shells, does not require an extra database, but does not show the time since a command)
# Link: https://github.com/dvorka/hstr
# Manual: man hstr
if [[ -x "$(command -v hstr)" ]]; then

	# Alias hh for hstr
	alias hh='hstr'

	# Get more colors
	export HSTR_CONFIG=hicolor

# McFly - fly through your shell history using a small neural network
# (shows the time since the command, but does not have favorites, and has issues syncing history across multiple shells)
# NOTE: You can type % to match any number of characters when searching
# Link: https://github.com/cantino/mcfly
# Install: curl -LSfs https://raw.githubusercontent.com/cantino/mcfly/master/ci/install.sh | sh -s -- --git cantino/mcfly
elif [[ -x "$(command -v mcfly)" ]]; then

	# Initialize McFly
	eval "$(mcfly init bash)"

	# Alias hh for McFly
	alias hh='mcfly search'

	# Enable fuzzy searching
	export MCFLY_FUZZY=2

	# Change the maximum number of results shown (default: 10)
	export MCFLY_RESULTS=60

	# To swap the color scheme for use in a light terminal, change this
	export MCFLY_LIGHT=FALSE

# Rich Enhanced Shell History (resh) Context-based replacement/enhancement for zsh and bash shell history
# (shows more information, has raw mode, but uses own database, does not have favorites, can't delete history)
# Link: https://github.com/curusarn/resh
# Install: (git clone https://github.com/curusarn/resh.git && cd resh && scripts/rawinstall.sh)
# Update: reshctl update
# WARNING: Install automatically adds lines to the end of the ~/.bashrc file
elif [[ -f ~/.resh/shellrc ]]; then

	# Source the scripts
	source ~/.resh/shellrc
	[[ -f ~/.bash-preexec.sh ]] && source ~/.bash-preexec.sh

	# Bind 'kill last command' to CTRL-x k
	bind '"\C-xk": "\C-a hstr -k \C-j"'

	# Alias hh for resh
	alias hh='resh'

fi

#######################################################
# qfc Command Line File Completion (Ctrl-F to list files)
# Link: https://github.com/pindexis/qfc
# Install: git clone https://github.com/pindexis/qfc $HOME/.qfc
#######################################################

# If qfc is installed, run it's initiation script
# Ctrl-f will pop up to select directories or files
# Ctrl-/ to cd into directory using qfc
if [[ -f "$HOME/.qfc/bin/qfc.sh" ]]; then
	source "$HOME/.qfc/bin/qfc.sh"
	qfc_quick_command 'cd' '\C-_' 'cd "$0"'
elif [[ -f /usr/share/qfc/qfc.sh ]]; then
	source /usr/share/qfc/qfc.sh
	qfc_quick_command 'cd' '\C-_' 'cd "$0"'
fi

#######################################################
# Settings and Exports
#######################################################

# Make sure 256 color terminals are enabled
export TERM=xterm-256color
export use_color=true

# Tell NCURSES to use UTF-8 encoding
export NCURSES_NO_UTF8_ACS=1

# If bat is installed, use it instead of cat
# https://github.com/sharkdp/bat
if [[ -x "$(command -v batcat)" ]]; then
	alias bat='batcat --force-colorization'
elif [[ -x "$(command -v bat)" ]]; then
	alias bat='bat --force-colorization'
fi

# ccat is the colorizing cat
# Link: https://github.com/owenthereal/ccat
if [[ -x "$(command -v ccat)" ]]; then
	alias cat='ccat'
fi

# Color for manpages in less makes manpages a little easier to read
if [[ -f /usr/share/source-highlight/src-hilite-lesspipe.sh ]]; then
	export PAGER=less
	export LESSOPEN="| /usr/share/source-highlight/src-hilite-lesspipe.sh %s"
elif [[ -x "$(command -v src-hilite-lesspipe.sh)" ]]; then
	export PAGER=less
	export LESSOPEN="| src-hilite-lesspipe.sh %s"
elif [[ -x "$(command -v moar)" ]]; then
	export PAGER=moar
elif [[ -x "$(command -v most)" ]]; then
	export PAGER=most
else
	export PAGER=less
fi
export LESS='--ignore-case --RAW-CONTROL-CHARS --LONG-PROMPT --prompt=%t?f%f :stdin .?pb%pb\%:?lbLine %lb:?bbByte %bb:-...'
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'
# NOTE: Use \less with the back-slash to remove line numbers or use -n or --line-numbers
alias less='less --ignore-case --RAW-CONTROL-CHARS --LONG-PROMPT --LINE-NUMBERS'

#######################################################
# Vivid LS_COLORS Generator
# Link: https://github.com/sharkdp/vivid
# Themes: https://github.com/sharkdp/vivid/tree/master/themes
#######################################################
# LS_COLORS (lscolors-git in Arch AUR repository)
# Link: https://github.com/trapd00r/LS_COLORS
# Install:
# mkdir /tmp/LS_COLORS && curl -L https://api.github.com/repos/trapd00r/LS_COLORS/tarball/master | tar xzf - --directory=/tmp/LS_COLORS --strip=1
# ( cd /tmp/LS_COLORS && sh install.sh )
#######################################################

# Colors for ls
export CLICOLOR=1

if [[ -x "$(command -v vivid)" ]]; then
	# Vivid is installed
	export LS_COLORS="$(vivid generate one-dark)"
elif [[ -f "$HOME/.local/share/lscolors.sh" ]]; then
	# LS_COLORS is installed locally
	source "$HOME/.local/share/lscolors.sh"
elif [[ -f /usr/share/LS_COLORS/dircolors.sh ]]; then
	# LS_COLORS is installed system wide
	source /usr/share/LS_COLORS/dircolors.sh
elif [[ -x /usr/bin/dircolors ]]; then
	test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
else
	# Export a custom ls color profile
	# NOTE: File types are in alphabetical order to make them easier to find
	export LS_COLORS='bd=40;33;01:ca=30;41:cd=40;33;01:di=00;34:do=01;35:ex=01;32:fi=00:ln=01;36:mh=00:mi=01;05;37;41:no=00:or=40;31;01:ow=34;42:pi=40;33:rs=0:sg=30;43:so=01;35:st=37;44:su=37;41:tw=30;42:*.7z=01;31:*.Z=01;31:*.aac=01;36:*.ace=01;31:*.ada=00;32:*.alz=01;31:*.ans=01;33:*.anx=01;35:*.arc=01;31:*.arj=01;31:*.asc=01;33:*.asf=01;35:*.asm=00;32:*.au=01;36:*.avi=01;35:*.axa=01;36:*.axv=01;35:*.bmp=01;35:*.bz2=01;31:*.bz=01;31:*.c=00;32:*.cab=01;31:*.cbl=00;32:*.cgm=01;35:*.conf=00;31:*.cpio=01;31:*.cpp=00;32:*.cpy=00;32:*.cs=00;32:*.css=00;32:*.csv=01;33:*.deb=01;31:*.dl=01;35:*.doc=01;33:*.docx=01;33:*.dot=01;33:*.dz=01;31:*.ear=01;31:*.emf=01;35:*.f90=00;32:*.f=00;32:*.flac=01;36:*.flc=01;35:*.fli=01;35:*.flv=01;35:*.for=00;32:*.gif=01;35:*.gl=01;35:*.go=00;32:*.groovy=00;32:*.gz=01;31:*.h=00;32:*.hpp=00;32:*.htm=00;32:*.html=00;32:*.inc=00;32:*.ini=00;32:*.jar=01;31:*.java=00;32:*.jpeg=01;35:*.jpg=01;35:*.js=00;32:*.json=00;32:*.lha=01;31:*.lib=00;32:*.lrz=01;31:*.lua=00;32:*.lz=01;31:*.lzh=01;31:*.lzma=01;31:*.lzo=01;31:*.m2v=01;35:*.m4v=01;35:*.m=00;32:*.mat=00;32:*.mcw=01;33:*.mid=01;36:*.midi=01;36:*.mk=00;32:*.mka=01;36:*.mkv=01;35:*.mng=01;35:*.mov=01;35:*.mp3=01;36:*.mp4=01;35:*.mp4v=01;35:*.mpc=01;36:*.mpeg=01;35:*.mpg=01;35:*.msg=01;33:*.nfo=01;33:*.nuv=01;35:*.ods=01;33:*.odt=01;33:*.oga=01;36:*.ogg=01;36:*.ogm=01;35:*.ogv=01;35:*.ogx=01;35:*.pbm=01;35:*.pcx=01;35:*.pdf=01;33:*.pgm=01;35:*.php=00;32:*.pl=00;32:*.png=01;35:*.pot=01;33:*.ppm=01;35:*.pps=01;33:*.ppt=01;33:*.pptx=01;33:*.prn=01;33:*.py=00;32:*.qt=01;35:*.r=00;32:*.ra=01;36:*.rar=01;31:*.rb=00;32:*.rlib=00;32:*.rm=01;35:*.rmvb=01;35:*.rpm=01;31:*.rs=00;32:*.rtf=01;33:*.rz=01;31:*.sar=01;31:*.sc=00;32:*.scala=00;32:*.scss=00;32:*.sh=00;32:*.slk=01;33:*.spx=01;36:*.sql=00;32:*.svg=01;35:*.svgz=01;35:*.swift=00;32:*.t7z=01;31:*.tar=01;31:*.taz=01;31:*.tbz2=01;31:*.tbz=01;31:*.tcl=00;32:*.template=00;32:*.tga=01;35:*.tgz=01;31:*.tif=01;35:*.tiff=01;35:*.tlz=01;31:*.tpl=00;32:*.ts=00;32:*.txt=01;33:*.txz=01;31:*.tz=01;31:*.tzo=01;31:*.vb=00;32:*.vba=00;32:*.vbs=00;32:*.vob=01;35:*.war=01;31:*.wav=01;36:*.wb1=01;33:*.wk1=01;33:*.wk3=01;33:*.wk4=01;33:*.wmv=01;35:*.wpd=01;33:*.wps=01;33:*.wri=01;33:*.xbm=01;35:*.xcf=01;35:*.xlr=01;33:*.xls=01;33:*.xlsx=01;33:*.xlw=01;33:*.xml=00;32:*.xpm=01;35:*.xspf=01;36:*.xwd=01;35:*.xz=01;31:*.yaml=00;32:*.yml=00;32:*.yuv=01;35:*.zip=01;31:*.zoo=01;31:'
fi

#######################################################
# Nethogs shows which processes are using network bandwidth
# Link: https://github.com/raboof/nethogs
#######################################################
# lsof command stands for List Of Open File
# Link: https://www.geeksforgeeks.org/lsof-command-in-linux-with-examples/
#######################################################
# iftop is a network analyzing tool used to view the bandwidth related stats
# Link: https://www.geeksforgeeks.org/iftop-command-in-linux-with-examples/
#######################################################

if [[ -x "$(command -v nethogs)" ]]; then
	# Watch real time network activity by process
	alias netwatch='sudo nethogs -d 0.5 -C'
elif [[ -x "$(command -v lsof)" ]]; then
	# Watch real time network activity using lsof instead
	alias netwatch='lsof -i -r 10'
elif [[ -x "$(command -v iftop)" ]]; then
	alias netwatch='sudo iftop'
fi

#######################################################
# Diff Enhancement
#######################################################

if [[ -x "$(command -v delta)" ]]; then
	# delta - Beautiful side by side colored diff with Git support and syntax highlighting
	# Link: https://github.com/dandavison/delta
	# Info: Add listed settings to your ~/.gitconfig
	alias diff='delta --side-by-side --line-numbers'
	export DIFFPROG="delta --side-by-side --line-numbers"
elif [[ -x "$(command -v icdiff)" ]]; then
	# Icdiff - Improved (side by side) colored diff
	# Link: https://github.com/jeffkaufman/icdiff
	alias diff='icdiff --line-numbers --strip-trailing-cr'
	export DIFFPROG="icdiff --line-numbers --strip-trailing-cr"
elif [[ -x "$(command -v colordiff)" ]]; then
	# Colorize diff output if colordiff is installed
	alias diff='colordiff'
	export DIFFPROG="colordiff"
else
	if [[ ${EDITOR} = 'nvim' ]]; then
		export DIFFPROG="nvim -d"
	elif [[ ${EDITOR} = 'vim' ]]; then
		export DIFFPROG="vim -d"
	else
		export DIFFPROG="diff"
	fi
fi

#######################################################
# Cod is a completion daemon for bash, fish, and zsh
# Link: https://github.com/dim-an/cod
#######################################################

if [[ -x "$(command -v cod)" ]]; then
	source <(cod init $$ bash)
fi

#######################################################
# Enable the "Command not found" hook
# Link: https://github.com/falconindy/pkgfile
# NOTE: pkgfile is targetted at Arch Linux users
# Install: pacman -S pkgfile
#######################################################

if [[ -r /usr/share/doc/pkgfile/command-not-found.bash ]]; then
	source /usr/share/doc/pkgfile/command-not-found.bash
fi

#######################################################
# User Specific Aliases
# This runs towards the end of the script in order to
# have supporting aliases and features and also so
# these can be over-written or modified
#######################################################

if [[ -f "$HOME/.bash_aliases" ]]; then
	source "$HOME/.bash_aliases"
elif [[ -f "$HOME/.config/bashrc/aliases" ]]; then
	source "$HOME/.config/bashrc/aliases"
fi

#######################################################
# Automatically source all files/links in the directory:
# ~/.config/bashrc/bashrc.d
#######################################################

# If the auto-source folder exists and has files in it...
if [[ -d $HOME/.config/bashrc/bashrc.d ]]; then

	# If the directory is not empty...
	if [[ "$(\ls -A $HOME/.config/bashrc/bashrc.d)" ]]; then

		# Loop through files (in alphabetical order) and source them
		# To specify a load order, files can be prefixed with numbers
		# (e.g. 00--filename, 50--filename, 95--filename)
		for file in $HOME/.config/bashrc/bashrc.d/*; do
			source "${file}"
		done
	fi
fi

#######################################################
# Enhancd next-generation cd command with an interactive filter
# Link: https://github.com/b4b4r07/enhancd
# Install: cd ~ && git clone https://github.com/b4b4r07/enhancd
#######################################################

if [[ -f "$HOME/enhancd/init.sh" ]]; then
	ENHANCD_FILTER=fzy:fzf:peco
	export ENHANCD_FILTER
	source ~/enhancd/init.sh
fi

#######################################################
# Terminology is a graphical EFL terminal emulator that can run in TTY sessions
# To split the window horizontally press Ctrl+Shift+PgUp
# To split the window vertically press Ctrl+Shift+PgDn
# To create Tabs press Ctrl+Shift+T and cycle through using Ctrl+1-9
# Link: https://github.com/borisfaure/terminology
# Link: https://linoxide.com/terminology-terminal/
#######################################################

if [[ $_SKIP_TERMINOLOGY_TTY = false ]] && command -v terminology>/dev/null; then
	# If we are in a TTY window , not in TMUX, and not logged in via SSH...
	if [[ "$(tty)" =~ /dev/tty ]] && [[ ! "$TERM" =~ screen ]] && [[ -z "$SSH_CLIENT" ]] && [[ -z "$SSH_TTY" ]]; then

		# If TMUX is installed and set to load at TTY
		if [[ $_TMUX_LOAD_TTY = true ]] && command -v tmux>/dev/null; then

			# Get the default session name
			if [[ -z "${_TMUX_LOAD_SESSION_NAME}" ]]; then
				if [[ "$(tmux list-sessions 2> /dev/null | wc -l)" -gt 0 ]]; then
					_TMUX_LOAD_SESSION_NAME=""
				else
					_TMUX_LOAD_SESSION_NAME="$(whoami)"
				fi
			fi

			# Create the TMUX session if it doesn't exists
			TMUX='' tmux new-session -d -s "${_TMUX_LOAD_SESSION_NAME}" 2> /dev/null
			terminology --fullscreen --borderless --256color --exec "tmux attach -t ${_TMUX_LOAD_SESSION_NAME}"

		# No TMUX
		else
			terminology --fullscreen --borderless --256color && exit
		fi

	fi

#######################################################
# Automatically launch TMUX if this is a TTY Console or SSH session
# Most terminals can launch TMUX and automatically exit when TMUX is detached:
# konsole -e 'tmux new-session -A -s main'
# xfce4-terminal -e 'tmux new-session -A -s main'
# gnome-terminal -e 'tmux new-session -A -s main'
# kitty sh -c "tmux new-session -A -s main"
# terminology --exec "tmux new-session -A -s main"
# guake -e tmux
# Yakuake Profile -> Command -> /bin/bash -c "tmux new-session -A -s main"
# Alacritty: https://github.com/alacritty/alacritty/issues/2956
# ssh user@server -t tmux new-session -A -s main
#######################################################

# If TMUX is installed...
elif command -v tmux>/dev/null; then

	# We're in a TTY terminal...
	if [[ "$(tty)" =~ /dev/tty ]] && [[ ! "$TERM" =~ screen ]]; then
		[[ $_TMUX_LOAD_TTY = true ]] && tm

	# We're logged in via SSH...
	elif [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
		[[ $_TMUX_LOAD_SSH = true ]] && tm

	# We are local and not using SSH or TTY...
	else
		[[ $_TMUX_LOAD_LOCAL = true ]] && tm
	fi
fi

#######################################################
# Tilix VTE Configuration
# Link: https://gnunn1.github.io/tilix-web/manual/vteconfig/
#######################################################

if [[ $TILIX_ID ]] || [[ $VTE_VERSION ]]; then
	if [[ -f /etc/profile.d/vte.sh ]]; then
		source /etc/profile.d/vte.sh
	fi
fi

##==============================================================================
## https://gitlab.com/that1communist/dotfiles/-/blob/master/.zshrc
##==============================================================================
### Bind keys
autoload -U compinit
compinit
bindkey "^?" backward-delete-char
bindkey '^[OH' beginning-of-line
bindkey '^[OF' end-of-line
bindkey '^[[5~' up-line-or-history
bindkey '^[[6~' down-line-or-history
bindkey "^[[A" history-beginning-search-backward-end
bindkey "^[[B" history-beginning-search-forward-end
bindkey "^r" history-incremental-search-backward
bindkey ' ' magic-space    # also do history expansion on space
bindkey '^I' complete-word # complete on tab, leave expansion to _expand
zstyle ':completion::complete:*' use-cache on
zstyle ':completion::complete:*' cache-path ~/.cache/zsh/$HOST

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-prompt '%SAt %p: Hit TAB for more, or the character to insert%s'
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'
zstyle ':completion:*' select-prompt '%SScrolling active: current selection at %p%s'

# list of completers to use
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate

# allow one error for every three characters typed in approximate completer
zstyle -e ':completion:*:approximate:*' max-errors \
    'reply=( $(( ($#PREFIX+$#SUFFIX)/2 )) numeric )'

# insert all expansions for expand completer
zstyle ':completion:*:expand:*' tag-order all-expansions

# formatting and messages
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''

# match uppercase from lowercase
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'

# offer indexes before parameters in subscripts
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters

# command for process lists, the local web server details and host completion
# on processes completion complete all user processes
zstyle ':completion:*:processes' command 'ps -au$USER'

## add colors to processes for kill completion
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'

#zstyle ':completion:*:processes' command 'ps -o pid,s,nice,stime,args'
#zstyle ':completion:*:urls' local 'www' '/var/www/htdocs' 'public_html'
#
#NEW completion:
# 1. All /etc/hosts hostnames are in autocomplete
# 2. If you have a comment in /etc/hosts like #%foobar.domain,
#    then foobar.domain will show up in autocomplete!
zstyle ':completion:*' hosts $(awk '/^[^#]/ {print $2 $3" "$4" "$5}' /etc/hosts | grep -v ip6- && grep "^#%" /etc/hosts | awk -F% '{print $2}')
# Filename suffixes to ignore during completion (except after rm command)
zstyle ':completion:*:*:(^rm):*:*files' ignored-patterns '*?.o' '*?.c~' \
    '*?.old' '*?.pro'
# the same for old style completion
#fignore=(.o .c~ .old .pro)

# ignore completion functions (until the _ignored completer)
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:*:*:users' ignored-patterns \
        adm apache bin daemon games gdm halt ident junkbust lp mail mailnull \
        named news nfsnobody nobody nscd ntp operator pcap postgres radvd \
        rpc rpcuser rpm shutdown squid sshd sync uucp vcsa xfs avahi-autoipd\
        avahi backup messagebus beagleindex debian-tor dhcp dnsmasq fetchmail\
        firebird gnats haldaemon hplip irc klog list man cupsys postfix\
        proxy syslog www-data mldonkey sys snort
# SSH Completion
zstyle ':completion:*:scp:*' tag-order \
   files users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:scp:*' group-order \
   files all-files users hosts-domain hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order \
   users 'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:ssh:*' group-order \
   hosts-domain hosts-host users hosts-ipaddr
zstyle '*' single-ignored show

source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
HISTFILE=~/.local/share/zsh/histfile
HISTSIZE=1024
SAVEHIST=4096
setopt autocd extendedglob
unsetopt beep nomatch
bindkey -v
zstyle :compinstall filename '~/.zshrc'
autoload -Uz compinit
compinit
