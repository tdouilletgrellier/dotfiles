# ----------------------------------------------------------------------------
# Configuration
# ----------------------------------------------------------------------------

# If run as "tmux attach", create a session if one does not already exist
# new-session -n $HOST

# Allow programs in the pane to bypass tmux using a terminal escape sequence
#set -g allow-passthrough

# Use select terminal scrollbars by putting the overflow into the terminal
set -ga terminal-overrides ',xterm*:smcup@:rmcup@'

# Set scrollback history to 100k which is very little memory
set -g history-limit 100000

# Shorten command delay
set -sg escape-time 1

# Set key repeat time for repeating actions on held keys
set -sg repeat-time 600

# Enable focus event reporting for better synchronization with the terminal
set -s focus-events on

# Keep the path on new panes and windows
tmux_conf_new_pane_retain_current_path=true
tmux_conf_new_window_retain_current_path=true

# Set window numbering to start at 1 which is more intuitive
set -g base-index 1

# Set pane numbering to start at 1 which is more intuitive
setw -g pane-base-index 1

# Renumber windows when a window is closed
set -g renumber-windows on

# Rename window to reflect current program
# (This causes problems if you manually rename your windows)
#setw -g automatic-rename on

# Toggle between the last two windows
bind a last-window

# Press Tab to switch to the next available window
bind Tab next-window

# Bind Shift-Tab to switch to the most recently accessed window
#bind BTab switch-client -l
bind BTab previous-window

# Always use the size of the largest client
#set -g window-size largest
setw -g aggressive-resize on

# Visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on

# ----------------------------------------------------------------------------
# Color Settings
# ----------------------------------------------------------------------------

# Enable 24-bit true color support in Tmux
# NOTE: Local .bashrc should have something like: export TERM=screen-256color
set -g default-terminal "tmux"
set-option -ga terminal-overrides ",*256col*:Tc,alacritty:Tc,deepin-terminal:Tc,guake:Tc,uxterm:Tc,xterm-kitty:Tc,xterm-terminator:Tc,xterm-terminology:Tc,yakuake:Tc"
tmux_conf_24b_colour=true

# ----------------------------------------------------------------------------
# New Keyboard Bindings
# ----------------------------------------------------------------------------

# CTRL-b is too far to reach with one hand
# We will use CTRL-a instead as the default PREFIX key
unbind C-b
set -g prefix C-a

# Use both CTRL-b and CTRL-a both as PREFIX keys
set -g prefix2 C-b

# Use send-prefix to pass CTRL-a through to application
bind C-a send-prefix

# quick view of processes
bind '`' split-window "exec htop"

# Prompt for a keyword and then open a man page for it in a new window
bind C-m command-prompt 'split-window -v "exec man %%"'

# Detach client
bind d detach

# Choose a client to detach
bind C-d choose-client

# ----------------------------------------------------------------------------
# Binding for Buffers
# ----------------------------------------------------------------------------

# Move the delete buffer default key binding to Prefix+_ and Prefix+Delete
# We will use - to split horizontally which makes much more sense
bind _ delete-buffer
# Check if tmux version is 3.0 or higher and, if so, bind-key the delete key
run-shell "if [ \"$(tmux -V | cut -d ' ' -f 2)\" -ge \"3.0\" ]; then tmux bind-key -T prefix Delete delete-buffer;tmux bind-key -T prefix Delete delete-buffer; fi"

# Rebind clear screen with CTRL-l
#bind C-l send-keys 'C-l'
bind-key -n C-l send-keys C-l \; send-keys -R \; clear-history

# List paste buffers
bind V list-buffers

# Choose which buffer to paste from
bind C-v choose-buffer

# Paste from the top paste buffer
bind v paste-buffer -p

# ----------------------------------------------------------------------------
# Bind Key for Windows and Panes
# ----------------------------------------------------------------------------

# When creating a new pane or window, use the current path
bind  c  new-window      -c "#{pane_current_path}"
bind  %  split-window -h -c "#{pane_current_path}"
bind '"' split-window -v -c "#{pane_current_path}"

# Use | or \ to split window horizontally and - to split vertically
bind  |  split-window -h -c "#{pane_current_path}"
bind '\' split-window -h -c "#{pane_current_path}"
unbind -
bind  -  split-window -v -c "#{pane_current_path}"

# Split the pane into a 2x2 grid of 4 panes
bind g selectp -t 1 \; splitw -h -p 50 \; selectp -t 1 \; splitw -v -p 50 \; selectp -t 3 \; splitw -v -p 50 \; selectp -t 1
bind G selectp -t 1 \; splitw -v -p 50 \; selectp -t 1 \; splitw -h -p 50 \; selectp -t 3 \; splitw -h -p 50 \; selectp -t 1

# Make the current window the first window
bind T swap-window -t 1

# Swap panes
bind-key -T prefix '<' swap-pane -U
bind-key -T prefix '>' swap-pane -D

# Swap panes with CTRL+ALT+Arrow Keys (no modifier)
bind -n S-Left select-pane -L   # Move to the pane on the left
bind -n S-Right select-pane -R  # Move to the pane on the right
bind -n S-Up select-pane -U     # Move to the pane above
bind -n S-Down select-pane -D   # Move to the pane below

# Move tabs (windows) left and right
bind-key -T prefix C-M-Left swap-window -t -1
bind-key -T prefix C-M-Right swap-window -t +1

# Move tabs (windows) to the first and last positions
bind-key -T prefix C-M-Up swap-window -t 0
bind-key -T prefix C-M-Down swap-window -t 9999

# With synchronized panes, you can send commands to multiple panes at once
bind-key "+" set-window-option synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# Choose window/session
bind "'" choose-window
bind '"' choose-session

# Bisplay visible indicator of each pane
bind q display-panes

# Toggle zoom
bind b break-pane

# Join windows (show the numbers with CTRL-w)
bind j command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind J command-prompt -p "send pane to:"  "join-pane -t '%%'"

# Rebind this for no confirmation
bind-key x kill-pane
bind-key & kill-window

# ----------------------------------------------------------------------------
# Attempt to Fix the Home and End Keys and SHIFT Arrow Keys
# ----------------------------------------------------------------------------

# Fix Home key
bind -T copy-mode-vi 'Home' send -X start-of-line

# Fix End key
bind -T copy-mode-vi 'End' send -X end-of-line

# Fix Home and End with Control and Shift
# (These don't seem to work with certain terminals/editors)
#bind-key -n C-Home send Escape "[1;5H"
#bind-key -n C-End send Escape "[1;5F"
#bind-key -n S-Home send Escape "[1;2H"
#bind-key -n S-End send Escape "[1;2F"
#bind-key -n S-Left send Escape "OD"
#bind-key -n S-Right send Escape "OC"
#bind-key -n S-Up send Escape "OA"
#bind-key -n S-Down send Escape "OB"

# ----------------------------------------------------------------------------
# Edit/Reload This Configuration File
# ----------------------------------------------------------------------------

# Edit the .tmux.conf configuration file in an editor that's installed
bind C-e run-shell 'EDITOR=""; \
	for editor in micro ne helix tilde nano nvim vim vi emacs; do \
		if command -v "$editor" >/dev/null 2>&1; then \
			tmux new-window -n "Edit tmux.conf" sh -c "$editor ~/.tmux.conf && $TMUX_PROGRAM ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} source ~/.tmux.conf; tmux display-message \"tmux.conf sourced\""; \
			break; \
		fi; \
	done;'

# Reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "Config reloaded"

# ----------------------------------------------------------------------------
# Extreme Ultimate .bashrc
# ----------------------------------------------------------------------------

# If using Extreme Ultimate .bashrc and you have the help file
# https://sourceforge.net/projects/ultimate-bashrc/files/
# Check if the file exists
if-shell "[ -f ~/.bashrc_help ]" \
	"bind h splitw -h -l 82 'less -frnM ~/.bashrc_help'"

if-shell "[ -f ~/.config/bashrc/help ]" \
	"bind h splitw -h -l 82 'less -frnM ~/.config/bashrc/help'"

if-shell "[ -f ~/readme.md ] && command -v glow >/dev/null 2>&1" \
	"bind C-h splitw -h -p 40 'glow --pager ~/readme.md'"

if-shell "[ -f ~/.config/bashrc/README.md ] && command -v glow >/dev/null 2>&1" \
	"bind C-h splitw -h -p 40 'glow --pager ~/.config/bashrc/README.md'"

# ----------------------------------------------------------------------------
# Mouse Enable
# ----------------------------------------------------------------------------

# Use the mouse to select panels
set-option -g mouse on
#set-option -g mouse off

# Toggle the mouse mode on and off
bind M set mouse \; display "Mouse mode: #{?mouse,on,off}"

# Make scrolling with wheels work
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M

# ----------------------------------------------------------------------------
# Windows/Pane Creation
# ----------------------------------------------------------------------------

# New window retains current path, possible values are:
#   - true
#   - false (default)
tmux_conf_new_window_retain_current_path=false

# New pane retains current path, possible values are:
#   - true (default)
#   - false
tmux_conf_new_pane_retain_current_path=true

# New pane tries to reconnect ssh sessions (experimental), possible values are:
#   - true
#   - false (default)
tmux_conf_new_pane_reconnect_ssh=false

# Prompt for session name when creating a new session, possible values are:
#   - true
#   - false (default)
tmux_conf_new_session_prompt=false

# ----------------------------------------------------------------------------
# System Clipboard
# ----------------------------------------------------------------------------

# Use vim keybindings in copy mode
set-window-option -g mode-keys vi

# In copy mode, copying selection also copies to the OS clipboard
#   - true
#   - false (default)
# on Linux, this requires xclip or xsel
# on macOS, this requires installing reattach-to-user-namespace, see README.md
tmux_conf_copy_to_os_clipboard=true

# Copy to X11 clipboard if 'xsel' is available, else try 'xclip'
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "$TMUX_PROGRAM save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "$TMUX_PROGRAM save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

# Copy to Wayland clipboard using 'wl-copy' if available
if -b 'command -v wl-copy > /dev/null 2>&1' 'bind y run -b "$TMUX_PROGRAM save-buffer - | wl-copy"'

# Copy to macOS clipboard using 'pbcopy'
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "$TMUX_PROGRAM save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "$TMUX_PROGRAM save-buffer - | reattach-to-usernamespace pbcopy"'

# Copy to Windows clipboard using 'clip.exe' if available, else try '/dev/clipboard'
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "$TMUX_PROGRAM save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "$TMUX_PROGRAM save-buffer - > /dev/clipboard"'

# ----------------------------------------------------------------------------
# Border Colors
# ----------------------------------------------------------------------------

# Set the border colors
set -g pane-border-style bg="default",fg="#79ff0f"
set -g pane-active-border-style fg="#e7bf00",bg=default

# ----------------------------------------------------------------------------
# Status Bar
# ----------------------------------------------------------------------------
# Short time is: %-I:%M:%P
# Full date and time is: %a %b %-m %Y %-I:%M:%S%P
# Example to reference output from a script: #($XDG_CONFIG_HOME/tmux/memory.sh)
# #W flag provides quick visual indicators about the status of a window
# * - The window is the current window
# - - The window is the last window (the window you were in before the current one)
# # - The window has a bell, activity, or silence alert
# ! - The window has received a content alert
# ~ - The window is monitored for silence
# M - The window contains a marked pane
# Z - The window's active pane is zoomed
# ----------------------------------------------------------------------------

# Toggle the statusbar
bind S set status

# Set UTF-8 support for the status bar
# This setting applies only if tmux version is 2.2 or greater
run-shell "if [ \"$(tmux -V | cut -d ' ' -f 2)\" -ge \"2.2\" ]; then tmux set -q -g status-utf8 on; tmux setw -q -g utf8 on; fi"

set-option -g status on            # Turn the status bar on
set -g status-interval 5           # Set update frequencey (default 15 seconds)
set -g status-justify centre       # Center window list for clarity
set-option -g status-position top  # Position the status bar at "top" or "bottom" of screen
set -g display-panes-time 800      # Adjust the duration for displaying pane indicators
set -g display-time 1000           # Extend the display time for status messages

# Set color for status bar
set-option -g status-fg "#79ff0f"
set-option -g status-bg "#000000"

# ----------------------------------------------------------------------------
# Status Left Options
# ----------------------------------------------------------------------------

set-option -g status-left-length 80
set-option -g status-left "#[bg=default,fg="#79ff0f"]#H#[fg="#2a2a2a"]  #[bg=default,fg="#cd0000"]#S#[fg="#2a2a2a"]  #[bg=default,fg="#79dff2"]#(free -m | awk '/Mem/{printf $3\"M/\"$2\"M\"}')"

# ----------------------------------------------------------------------------
# Window Status Format →
# ----------------------------------------------------------------------------

# Window status format for the active window
set-window-option -g window-status-current-format '#[bg='default',fg='#79ff0f'] (#[bg='default',fg='#cd0000',bold]#I#[fg='#e7bf00']#F#[bg='default',fg='#79ff0f']|#[fg='#e7bf00']#W#[bg='default',fg='#79ff0f']|#[fg='#ffffff']#{s|$HOME|~|;s|/.*/|/…/|:pane_current_path}#[bg='default',fg='#79ff0f']) '

# Window status format for inactive windows
set-window-option -g window-status-format '#[bg='default',fg='#79ff0f'] (#[fg='#cd0000',dim]#I#[fg='#bbbbbb']#F#[fg='#79ff0f']|#[fg='#bbbbbb']#W#[fg='#79ff0f']|#[fg='#ffffff']#{s|$HOME|~|;s|/.*/|/…/|:pane_current_path}#[bg='default',fg='#79ff0f']) '

# Set background color for tabs with activity to a brighter color
set-window-option -g window-status-activity-style 'bg='#66ff66',bold'

# ----------------------------------------------------------------------------
# Status Right Options
# ----------------------------------------------------------------------------

set-option -g status-right-length 80
set -g status-right "#[fg="#79dff2"]Up #(uptime | awk -F, '{print $1,$2}' | sed 's/:/h /g;s/^.*up *//; s/ *[0-9]* user.*//;s/[0-9]$/&m/;s/ day. */d /g')#[fg="#2a2a2a"]  #[fg="#79ff0f"]%a %b %-m %-I:%M%P"

set-option -g status-style bg=default
set-option -g status-bg default
set -g status-bg default
